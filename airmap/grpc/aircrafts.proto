syntax = "proto3";

import "ids.proto";

package grpc;

// Aircraft describes an aircraft in terms of its model and its manufacturer.
message Aircraft {
  // Model bundles up a model id and a product name.
  message Model {
    AircraftModelId id = 1;  // The unique id of the model in the context of AirMap.
    string name        = 2;  // The human-readable name of the model.
  }

  // Manufacturer bundles up an id and a human-readable name.
  // Please note that the id is only unique/relevant in the context of the
  // AirMap services.
  message Manufacturer {
    AircraftManufacturerId id = 1;  // The unique id of the manufacturer in the context of AirMap.
    string name               = 2;  // The human-readable name of the manufacturer.
  }

  Model model               = 1;  // Details describing the model of an aircraft.
  Manufacturer manufacturer = 2;  // Details about the manufacturer of an aircraft.
}

// AircraftsListManufacturersParameters bundles up input parameters for a call to
// ListManufacturers.
message AircraftsListManufacturersParameters {
  string name = 1;  // Search for the specific manufacturer with this name.
}

// AircraftsListManufacturersResult models the outcome of calling
// ListManufacturers.
message AircraftsListManufacturersResult {
  repeated Aircraft.Manufacturer manufacturers = 1;  // The aircraft manufacturer.
}

// ListModelsParameters bundles up input parameters for a call to ListModels.
message AircraftsListModelsParameters {
  AircraftManufacturerId id = 1;  // Limit the result to models manufactured by the
                                  // manufacturer with this id, can be empty.
  string model_name = 2;          // Limit the result to the specific model with this
                                  // name, can be empty.
}

// ListModelsResult models the outcome of calling ListModels.
message AircraftsListModelsResult {
  repeated Aircraft aircrafts = 1;  // The list of models.
}

// AircraftsGetManufacturerParameters bundles up input parameters for a call to
// GetManufacturer.
message AircraftsGetManufacturerParameters {
  AircraftModelId id = 1;  // The specific id of the model, must not be empty.
}

// AircraftsGetManufacturerResult bundles up input parameters for a call to
// GetManufacturer.
message AircraftsGetManufacturerResult {
  Aircraft.Manufacturer manufacturer = 1;  // The aircraft manufacturer.
}

// AircraftsGetModelParameters bundles up input parameters for a call to
// GetModel.
message AircraftsGetModelParameters {
  AircraftModelId id = 1;  // The specific id of the model, must not be empty.
}

// AircraftsGetModelResult models the outcome of calling GetModel.
message AircraftsGetModelResult {
  Aircraft aircraft = 1;  // The aircraft model.
}

// Aircrafts models access to a database of aircraft models and manufacturers.
service Aircrafts {
  // ListManufacturers queries the AirMap services for known aircraft
  // manufacturers.
  rpc ListManufacturers(AircraftsListManufacturersParameters) returns (AircraftsListManufacturersResult);
  // ListModels queries the AirMap services for detailed information about known
  // aircraft models.
  rpc ListModels(AircraftsListModelsParameters) returns (AircraftsListModelsResult);
  // GetModel queries the AirMap services for a specific aircraft model.
  rpc GetManufacturer(AircraftsGetManufacturerParameters) returns (AircraftsGetManufacturerResult);
  // GetModel queries the AirMap services for a specific aircraft model.
  rpc GetModel(AircraftsGetModelParameters) returns (AircraftsGetModelResult);
}
