syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "ids.proto";
import "telemetry.proto";
import "traffic.proto";
import "units.proto";
import "wgs84.proto";

package grpc;

// Flight bundles together properties describing an individual flight.
message Flight {
  FlightId id                          = 1;  // The unique identifier of a flight in the context of AirMap.
  FlightPlanId flight_plan             = 2;  // The flight plan corresponding to this flight.
  PilotId pilot                        = 3;  // The pilot responsible for the flight.
  AircraftId aircraft                  = 4;  // The aircraft conducting the flight.
  Coordinate takeoff_coordinate        = 5;  // The coordinate of the takeoff point.
  bytes wkb                            = 6;  // The geometry describing the flight.
  google.protobuf.Timestamp created_at = 7;  // Point in time when the flight was created.
  google.protobuf.Timestamp start_time = 8;  // Point in time when the flight will start/was started.
  google.protobuf.Timestamp end_time   = 9;  // Point in time when the fligth will end.
}

// FlightUpdate bundles up types communicated via update streams from clients to the service.
message FlightUpdate {
  message Acknowledgement {
    uint64 counter                               = 1;
    google.protobuf.Timestamp received_timestamp = 3;
    google.protobuf.Timestamp sent_timestamp     = 4;
  }

  // FromClient bundles up updates sent from a client to the service.
  message FromClient {
    uint64 counter                                        = 1;  // The counter marking individual update batches.
    FlightId flight                                       = 2;  // The id of the flight that the update belongs to.
    repeated Telemetry.Measurement telemetry_measurements = 3;  // Telemetry measurements obtained by the client.
  }

  message FromService {
    FlightId flight                         = 1;  // The id of the flight that the update belongs to.
    repeated Acknowledgement acks           = 2;  // Batch of acks to previous incoming updates.
    repeated TrafficUpdate.ToClient traffic_updates = 3;  // Traffic updates sent from the service to the client.
  }
}

// FlightsSearchParameters bundles up input parameters for a call to Flights.Search.
message FlightsSearchParameters {
  uint64 limit                           = 1;   // Limit the number of results to 'limit'.
  bytes wkb                              = 2;   // Search for flights intersecting this geometry.
  string country                         = 3;   // Search for flights in this country.
  string state                           = 4;   // Search for flights in this state.
  string city                            = 5;   // Search for flights in this city.
  PilotId pilot                          = 6;   // Search for flights operated by this pilot.
  google.protobuf.Timestamp start_after  = 7;   // Search for flights that started after this timestamp.
  google.protobuf.Timestamp start_before = 8;   // Search for flights that started before this timestamp.
  google.protobuf.Timestamp end_after    = 9;   // Search for flights that ended after this timestamp.
  google.protobuf.Timestamp end_before   = 10;  // Search for flights that ended before this timestamp.
  bool enhance                           = 11;  // If true, provides extended information per flight in the result set.
}

// FlightsSearchResult models the result of a call to Flights.Search.
message FlightsSearchResult {
  repeated Flight flights = 1;  // The flights matching the search criteria.
}

// FlightsSearchForIdParameters bundles up input parameters for a call to Flights.SearchForId.
message FlightsSearchForIdParameters {
  FlightId id  = 2;  // Search for the flight with this id.
  bool enhance = 3;  // If true, provides extended information per flight in the result set.
}

message StartCommunicationResult {
  string secretKey = 1;
}

// FlightsSearchForIdResult models the result of a call to Flights.SearchForId.
message FlightsSearchForIdResult {
  Flight flight = 1;  // The flight corresponding to the id.
}

// FlightsCreateParameters bundles up input parameters for a call to Flights.Create.
message FlightsCreateParameters {
  PilotId pilot                        = 1;   // The pilot
  Coordinate takeoff_coordinate        = 2;   // The takeoff coordinate.
  Meters max_altitude                  = 3;   // Maximum altitude of the entire flight.
  AircraftId aircraft                  = 4;   // Id of the aircraft carrying out the flight.
  google.protobuf.Timestamp start_time = 5;   // Point in time when the flight started.
  google.protobuf.Timestamp end_time   = 6;   // Point in time when the flight will end.
  bool is_public                       = 7;   // If true, the flight is considered public and displayed to AirMap users.
  bool give_digital_notice             = 8;   // If true, the flight is announced to airspace operators.
  Meters buffer                        = 9;   // Buffer around the take-off point.
  bytes wkb                            = 10;  // The geometry that describes the flight.
}

// FlightsCreateResult models the result of a call to Flights.Create.
message FlightsCreateResult {
  Flight flight = 1;  // The newly created flight.
}
// FlightsEndParameters bundles up input parameters for a call to Flights.End.
message FlightsEndParameters {
  FlightId flight = 1;  // Id of the flight that should be ended.
}
// FlightsEndResult models the result of a call to Flights.End.
message FlightsEndResult {
  google.protobuf.Timestamp end_time = 1;  // Point in time when the flight was ended.
}
message FlightEndCommunicationResult {
  bool success = 1;
}
// FlightsDeleteParameters bundles up input parameters for a call to Flights.Delete.
message FlightsDeleteParameters {
  FlightId flight = 1;  // Id of the flight that should be deleted.
}

// FlightsDeleteResult models the result of a call to Flights.Delete.
message FlightsDeleteResult {
  FlightId flight = 1;  // Id of the flight that was deleted.
}

// Flights provides functionality for managing flights.
service Flights {
  // Search queries the AirMap services for known flights.
  rpc Search(FlightsSearchParameters) returns (FlightsSearchResult);
  // SearchForIds queries the AirMap services for detailed information about flights identified by UUIDs.
  rpc SearchForID(FlightsSearchForIdParameters) returns (FlightsSearchForIdResult);
  // StartFlightComms queries the AirMap services for information about flights and returns back a secret token for the flight.
  rpc StartFlightComms(FlightsSearchForIdParameters) returns (StartCommunicationResult);
  // Create creates a new flight.
  rpc Create(FlightsCreateParameters) returns (FlightsCreateResult);
  // End ends a flight.
  rpc End(FlightsEndParameters) returns (FlightsEndResult);
  // EndFlightComms queries the AirMap services for information about flights and revokes the tocken, stopping communication.
  rpc EndFlightComms(FlightsSearchForIdParameters) returns (FlightEndCommunicationResult);
  // Delete removes the flight.
  rpc Delete(FlightsDeleteParameters) returns (FlightsDeleteResult);
  // ConnectToUpdates sets up streaming of updates for flights.
  rpc ConnectToUpdates(stream FlightUpdate.FromClient) returns (stream FlightUpdate.FromService);
}
