syntax = "proto3";

package grpc;

import "ids.proto";
import "flight_plans.proto";

message Transaction {
  AuthorizerId authorizer  = 1;
  string entity_id         = 2;
  string entity_name       = 3;
  FlightPlanId flight_plan = 4;
  string feature           = 5;

  // Status enumerates all known states of a Transaction
  enum Status {
    unknown_status = 0;
    accepted       = 1;
    rejected       = 2;
    pending        = 3;
  }

  // Detail enumerates all known detailed states of a Transaction.
  enum Detail {
    unknown_detail    = 0;   // unknown_status
    created           = 1;   // pending
    error             = 2;   // pending
    scheduled         = 3;   // pending
    requested         = 4;   // pending
    airmap_accepted   = 5;   // accepted
    partner_accepted  = 6;   // accepted
    airmap_rejected   = 7;   // rejected
    partner_rejected  = 8;   // rejected
    airmap_cancelled  = 9;   // rejected
    partner_cancelled = 10;   // rejected
    fatal_error       = 11;  // rejected
  }

  Status status      = 6;  // The current status of the transaction.
  Detail detail      = 7;  // The current detailed state of the transaction
  string message     = 8;  // The message leading to the current state
  string description = 9;  // The human-readable description of this transaction
}

message TransactionRequest {
  AuthorizerId authorizer = 1;
  string entity_id        = 2;
  string entity_name      = 3;
  string feature          = 4;
  string transaction_type = 5;
  string message          = 7;
}

message CreateTransactionsParameters {
  FlightPlan flight_plan               = 1;
  repeated TransactionRequest requests = 2;
}

message CreateTransactionsResult {
  FlightPlanId flight_plan          = 1;
  repeated Transaction transactions = 2;
}

message CancelTransactionsParameters {
  FlightPlanId flight_plan = 1;
}

message CancelTransactionsResult {
  FlightPlanId flight_plan          = 1;
  repeated Transaction transactions = 2;
}

message GetTransactionsParameters {
  FlightPlanId flight_plan = 1;
}

message GetTransactionsResult {
  FlightPlanId flight_plan          = 1;
  repeated Transaction transactions = 2;
}

service AuthHub {
  rpc CreateTransactions(CreateTransactionsParameters) returns (CreateTransactionsResult);
  rpc GetTransactions(GetTransactionsParameters) returns (GetTransactionsResult);
  rpc CancelTransactions(CancelTransactionsParameters) returns (CancelTransactionsResult);
}
