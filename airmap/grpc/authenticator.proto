syntax = "proto3";

import "google/protobuf/duration.proto";

import "ids.proto";

package grpc;

// Credentials bundles up all credentials required
// to use the AirMap SDK and APIs.
message Credentials {
  // Anonymous bundles up all attributes needed to
  // authenticate anonymously with the AirMap services.
  message Anonymous {
    string id = 1;  // A user-specific id, can be empty.
  }

  // OAuth bundles up all attributes needed to authenticate
  // with username/password with the AirMap services.
  message OAuth {
    string username    = 1;
    string password    = 2;
    ClientId client_id = 3;
    DeviceId device_id = 4;
  }

  // Renewed bundles up all attributes needed to renew an
  // existing authentication with the AirMap services.
  message Renewed {
    ClientId client_id   = 1;  // The client id for which the authentication should be extended.
    string refresh_token = 2;  // The refresh_token that should be used to extend the existing authentication.
  }
}

/// Token models an authentication token required to access the AirMap services.
message Token {
  // Anonymous models a token for an anonymous authentication with the AirMap services.
  message Anonymous {
    string id = 1;  // The authentication id.
  }

  // OAuth models a token for an authentication with OAuth credentials with the AirMap services.
  message OAuth {
    string refresh = 1;  // The refresh token for subsequent renewal requests.
    string id      = 2;  // The id token.
    string access  = 3;  // The access token.
  }

  // Renewed models a token for a refreshed authentication with OAuth credentials with the AirMap services.
  message Renewed {
    string id                           = 1;  // The id token.
    OAuth original_token                = 2;  // The original token used for renewal.
    google.protobuf.Duration expires_in = 3;  // The token expires in 'expires_in'.
  }

  oneof details {
    Anonymous anonymous = 1;  // An anonymous token.
    OAuth oauth         = 2;  // An OAuth token.
    Renewed renewed     = 3;  // A renewed OAuth token.
  }
}

// Authentication bundles up types used in communcation with the Authenticator.
message Authentication {
  // Scope enumerates all known authentication scopes.
  enum Scope {
    access_token           = 0;
    open_id                = 1;
    open_id_offline_access = 2;
  }

  // GrantType enumerates all known grant types.
  enum GrantType {
    password = 0;  // The grant is constituted by a password.
    bearer   = 1;  // The grant is constituted by a bearer.
  }

  // Connection enumerates all known types of connection to users.
  enum Connection {
    username_password_authentication = 0;  // authentication requires username/password.
  }
}

// AuthenticateAnonymouslyParameters bundles up input parameters for a call to
// Authenticator.AuthenticateAnonymouslyParameters.
message AuthenticateAnonymouslyParameters {
  Credentials.Anonymous credentials = 1;  // The credentials used for authentication.
}

// AuthenticateAnonymouslyResult models the result of calling Authenticator.AuthenticateAnonymously.
message AuthenticateAnonymouslyResult {
  Token.Anonymous token = 1;  // The token representing the authentication.
}

// AuthenticateWithPasswordParameters bundles up input parameters for Authenticator.AuthenticateWithPassword.
message AuthenticateWithPasswordParameters {
  Credentials.OAuth credentials       = 1;  // The credentials used for authentication.
  Authentication.GrantType grant_type = 2;  //
}

// AuthenticateWithPasswordResult models the result of calling Authenticator.AuthenticateWithPassword.
message AuthenticateWithPasswordResult {
  Token.OAuth token = 1;  // The token representing the authentication.
}

// RenewAuthenticationParameters bundles up input parameters for Authenticator.RenewAuthentication.
message RenewAuthenticationParameters {
  Credentials.Renewed credentials = 1;  // The credentials used for authentication.
}

// RenewAuthenticationResult models the result of calling Authenticator.RenewAuthentication.
message RenewAuthenticationResult {
  Token.Renewed token = 1;  // The token representing the authentication.
}

// Authenticator provides methods to authenticate with the AirMap services.
service Authenticator {
  // AuthenticateAnonymously authenticates an anonymous user, i.e., a user that does not have an account with the AirMap
  // services.
  rpc AuthenticateAnonymously(AuthenticateAnonymouslyParameters) returns (AuthenticateAnonymouslyResult);
  // AuthenticateWithPassword authenticates a known user with the AirMap services.
  rpc AuthenticateWithPassword(AuthenticateWithPasswordParameters) returns (AuthenticateWithPasswordResult);
  // RenewAuthentication renews a previous authentication.
  rpc RenewAuthentication(RenewAuthenticationParameters) returns (RenewAuthenticationResult);
}
