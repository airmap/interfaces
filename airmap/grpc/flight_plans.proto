syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "ids.proto";
import "wgs84.proto";
import "rules.proto";
package grpc;

// FlightPlan bundles together properties describing a plan for a flight.
message FlightPlan {
  message Geometry {
    string geo_json = 1;
  }

  message Feature {
    oneof Value {
      bool b   = 1;
      double d = 2;
      string s = 3;
    }
  }

  message Briefing {
    RulesAssessment rules_assessment = 1;
  }

  FlightPlanId id                      = 1;   // The unique identifier of a flight in the context of AirMap.
  FlightId flight                      = 2;   // The unique identifier of the flight that is created on successful submission.
  PilotId pilot                        = 3;   // The pilot responsible for the flight.
  AircraftId aircraft                  = 4;   // The aircraft conducting the flight.
  Coordinate takeoff_point             = 5;   // The takeoff point of the future flight.
  double altitude_agl_min              = 6;   // Minimum altitude during the flight in [m].
  double altitude_agl_max              = 7;   // Maximum altitude during the flight in [m].
  double buffer                        = 8;   // The buffer in [m] around the geometry.
  Geometry geometry                    = 9;   // The geometry describing the flight.
  google.protobuf.Timestamp start_time = 10;  // Point in time when the flight will start/was started.
  google.protobuf.Timestamp end_time   = 11;  // Point in time when the fligth will end.
  map<string, Feature> features = 12;         // Additional properties of the planned flight.
  repeated RulesetId rulesets = 13;           // The rulesets this flight is operated under.
}

// FlightPlansGetParameters bundles up input parameters for calls to FlightPlans.Get
message FlightPlansGetParameters {
  FlightPlanId id = 1;  // The id of the flight plan that should be searched for.
}

// FlightPlansGetResult models the result of a call to FlightPlans.Get.
message FlightPlansGetResult {
  FlightPlan flight_plan = 1;  // The specific flight plan.
}

// FlightPlansCreateParameters bundles up input parameters for calls to FlightPlans.Create.
message FlightPlansCreateParameters {
  FlightPlan flight_plan = 1;  // The flight plan to be created.
}

// FlightPlansCreateResult models the result of a call to FlightPlans.Create.
message FlightPlansCreateResult {
  FlightPlan flight_plan = 1;  // The newly created flight plan.
}

// FlightPlansUpdateParameters bundles up input parameters for calls to FlightPlans.Update.
message FlightPlansUpdateParameters {
  FlightPlan flight_plan = 1;  // The updated flight plan.
}

// FlightPlansUpdateResult models the result of a call to FlightPlans.Update.
message FlightPlansUpdateResult {
  FlightPlan flight_plan = 1;  // The new state of the flight plan.
}

// FlightPlansDeleteParameters bundles up input parameters for calls to FlightPlans.Delete.
message FlightPlansDeleteParameters {
  FlightPlanId id = 1;  // The id of the flight plan that should be deleted.
}

// FlightPlansDeleteResult models the result of a call to FlightPlans.Delete.
message FlightPlansDeleteResult {
  FlightPlanId id = 1;  // The id of the flight plan that should be deleted.
}

// FlightPlansRenderBriefingParameters bundles up input parameters for calls to FlightPlans.RenderBriefing
message FlightPlansRenderBriefingParameters {
  FlightPlanId id = 1;  // The id of the flight plan for which a briefing should be obtained.
}

// FlightPlansRenderBriefingResult models the result of a call to FlightPlans.RenderBriefing.
message FlightPlansRenderBriefingResult {
  FlightPlan.Briefing briefing = 1;  // The resulting briefing.
}

// FlightPlansSubmitParameters bundles up input parameters for calls to FlightPlans.Submit.
message FlightPlansSubmitParameters {
  FlightPlanId id         = 1;  // The id of the flight plan that should be submitted.
  bool make_flight_public = 2;
}

// FlightPlansSubmitResult models the result of a call to FlightPlans.Submit.
message FlightPlansSubmitResult {
  FlightPlan flight_plan       = 1;  // The flight plan that was submitted.
  FlightPlan.Briefing briefing = 2;  // The resulting briefing.
}

// FlightPlansRenderPreliminaryBriefingParameters bundles up input parameters for calls to FlightPlans.RenderPreliminaryBriefing
message FlightPlansRenderPreliminaryBriefingParameters {
  FlightPlan flight_plan = 1;  // The draft flight plan
}

// FlightPlansRenderPreliminaryBriefingResult models the result of a call to FlightPlans.RenderPreliminaryBriefing.
message FlightPlansRenderPreliminaryBriefingResult {
  FlightPlan.Briefing briefing = 1;  // The resulting briefing.
}

// FlightPlans provides functionality for managing flight plans.
service FlightPlans {
  // Returns a flight plan for a given flight plan id
  rpc Get(FlightPlansGetParameters) returns (FlightPlansGetResult);
  // Create creates a flight plan with parameters.
  rpc Create(FlightPlansCreateParameters) returns (FlightPlansCreateResult);
  // Update updates an existing flight plan.
  rpc Update(FlightPlansUpdateParameters) returns (FlightPlansUpdateResult);
  // Delete deletes an existing flight plan.
  rpc Delete(FlightPlansDeleteParameters) returns (FlightPlansDeleteResult);
  // RenderBriefing renders a flight briefing of an existing flight plan.
  rpc RenderBriefing(FlightPlansRenderBriefingParameters) returns (FlightPlansRenderBriefingResult);
  // Submit submits an existing flight plan for validation and authorization.
  rpc Submit(FlightPlansSubmitParameters) returns (FlightPlansSubmitResult);
  // RenderPreliminaryBriefing renders a preliminary briefing of a flight plan draft.
  rpc RenderPreliminaryBriefing(FlightPlansRenderPreliminaryBriefingParameters) returns (FlightPlansRenderPreliminaryBriefingResult);
}
