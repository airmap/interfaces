syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "aircrafts.proto";
import "ids.proto";

package grpc;

// Pilot bundles up all properties describing a pilot on the AirMap services.
message Pilot {
  // Aircraft describes a vehicle owned by a Pilot.
  message Aircraft {
    AircraftId id                        = 1;  // The unique id of the vehicle in the context of AirMap.
    string nick_name                     = 2;  // The human-readable nickname of the vehicle.
    grpc.Aircraft aircraft               = 3;  // The model of the aircraft.
    google.protobuf.Timestamp created_at = 4;  // Timestamp marking the creation of the device in the AirMap system.
  }

  // VerificationStatus summarizes the
  // status of contact detail verification.
  message VerificationStatus {
    bool email = 1;  // true iff the email address of the pilot has been verified
    bool phone = 2;  // true iff the phone number of the pilot has been verified
  }

  // Statistics about the pilot and her
  // flight experience as recorded by the
  // AirMap services.
  message Statistics {
    // Flight bundles up statistics about conducted flights.
    message Flight {
      uint64 total                               = 1;  // The total number of flights.
      google.protobuf.Timestamp last_flight_time = 2;  // Date and time of the last flight:
    }

    // Aircraft bundles up statistics about aircrafts.
    message Aircraft {
      uint64 total = 1;  // The total number of aircrafts
    }

    Flight flight     = 1;  // Statistical details about flights conducted by a pilot.
    Aircraft aircraft = 2;  // Statistical details about aircrafts owned by a pilot.
  };

  // App- and user-specific metadata.
  message Metadata {
    map<string, string> app  = 1;  // App-specific meta-data.
    map<string, string> user = 2;  // User-specific meta-data.
  }

  PilotId id                             = 1;   // The unique id of the pilot in the context of AirMap.
  string first_name                      = 2;   // The first name of the pilot.
  string last_name                       = 3;   // The last name of the pilot.
  string user_name                       = 4;   // The AirMap username of this pilot.
  string phone                           = 5;   // The phone number of the pilot.
  string picture_url                     = 6;   // The URL of a picture showing the pilot.
  VerificationStatus verification_status = 7;   // The verification status of a pilot's contact information.
  Statistics statistics                  = 8;   // Statistics about a pilot's flights and aircrafts.
  Metadata metadata                      = 9;   // Metadata associated with a pilot.
  google.protobuf.Timestamp created_at   = 10;  // Timestamp of the creation of this pilot in the AirMap system.
};

// PilotsCurrentParameters bundles up input parameters for a call to Pilots.Current.
message PilotsCurrentParameters {
  bool retrieve_statistics = 1;  // If true, includes aircraft and flight statistics in the response.
}

// PilotsCurrentResult models the result of a call to Pilots.Current.
message PilotsCurrentResult {
  Pilot pilot = 1;  // The profile of the authenticated pilot.
}

// PilotsSearchForIdParameters bundles up input parameters for a call to Pilots.SearchForId.
message PilotsSearchForIdParameters {
  PilotId pilot            = 1;  // The id of the pilot profile that should be searched for.
  bool retrieve_statistics = 2;  // If true, includes aircraft and flight statistics in the response.
}

// PilotsSearchForIdResult models the result of a call to Pilots.SearchForId.
message PilotsSearchForIdResult {
  Pilot pilot = 1;  // The pilot profile.
}

// PilotsUpdateParameters bundles up input parameters for a call to Pilots.Update.
message PilotsUpdateParameters {
  PilotId pilot                     = 1;  // Updates the specific pilot with this id.
  string first_name                 = 2;  // The first name of the pilot.
  string last_name                  = 3;  // The last name of the pilot.
  string user_name                  = 4;  // The AirMap username of this pilot.
  string phone                      = 5;  // The phone number of the pilot.
  map<string, string> app_metadata  = 6;  // App-specific metadata associated to the pilot.
  map<string, string> user_metadata = 7;  // User-specific metadata associated to the pilot.
}

// PilotsUpdateResult models the result of a call to Pilots.Update.
message PilotsUpdateResult {
  Pilot pilot = 1;  // The updated pilot profile.
}

// PilotsStartVerifyPhoneNumberParameters bundles up input parameters for a call to Pilots.StartVerifyPhoneNumber.
message PilotsStartVerifyPhoneNumberParameters {
  PilotId pilot = 1;  // The id of the pilot profile for which the phone number should be verified.
}

// PilotsStartVerifyPhoneNumberResult models the result of a call to Pilots.StartVerifyPhoneNumber.
message PilotsStartVerifyPhoneNumberResult {
  // Empty on purpose
}

// PilotsFinishVerifyPhoneNumberParameters bundles up input parameters for a call to Pilots.FinishVerifyPhoneNumber.
message PilotsFinishVerifyPhoneNumberParameters {
  PilotId pilot = 1;  // The id of the pilot profile for which the phone number should be verified.
  uint32 secret = 2;  // The secret token sent to the pilot via SMS.
}

// PilotsFinishVerifyPhoneNumberResult models the result of a call to Pilots.FinishVerifyPhoneNumber.
message PilotsFinishVerifyPhoneNumberResult {
  // Empty on purpose
}

// PilotsListAircraftsParameters bundles up input parameters for a call to Pilots.ListAircrafts.
message PilotsListAircraftsParameters {
  PilotId pilot = 1;  // The id of the pilot profile for which the associated aircrafts should be listed.
}

// PilotsListAircraftsResult models the result of a call to Pilots.ListAircrafts.
message PilotsListAircraftsResult {
  repeated Pilot.Aircraft aircrafts = 1;  // The aircrafts associated with the pilot profile.
}

// PilotsAddAircraftParameters bundles up input parameters for a call to Pilots.AddAircraft.
message PilotsAddAircraftParameters {
  PilotId pilot         = 1;  // Adds an aircraft for the pilot with this id.
  AircraftModelId model = 2;  // The id of the model of the aircraft.
  string nick_name      = 3;  // The nickname of the aircraft.
}
// PilotsAddAircraftResult models the result of a call to Pilots.AddAircraft.
message PilotsAddAircraftResult {
  Pilot.Aircraft aircraft = 1;  // The newly added aircraft.
}

// PilotsDeleteAircraftParameters bundles up input parameters for a call to Pilots.DeleteAircraft.
message PilotsDeleteAircraftParameters {
  PilotId pilot       = 1;  // The id of the pilot profile for which an associated aircrafts should be deleted.
  AircraftId aircraft = 2;  // The id of the aircraft that should be deleted.
}

// PilotsDeleteAircraftResult models the result of a call to Pilots.DeleteAircraft.
message PilotsDeleteAircraftResult {
  // Empty on purpose.
}

// PilotsUpdateAircraftParameters bundles up input parameters for a call to Pilots.UpdateAircraft.
message PilotsUpdateAircraftParameters {
  PilotId pilot         = 1;  // Adds an aircraft for the pilot with this id.
  AircraftModelId model = 2;  // The id of the model of the aircraft.
  string nick_name      = 3;  // The nickname of the aircraft.
}

// PilotsUpdateAircraftResult models the result of a call to Pilots.UpdateAircraft.
message PilotsUpdateAircraftResult {
  // Empty on purpose.
}

// Pilots provides functionality to manage (the authorized) pilot.
service Pilots {
  // Current queries the AirMap services for the profile of the currently authenticated pilot.
  rpc Current(PilotsCurrentParameters) returns (PilotsCurrentResult);
  // SearchForId queries the AirMap services for the profile associated with a pilot id.
  rpc SearchForId(PilotsSearchForIdParameters) returns (PilotsSearchForIdResult);
  // Update updates a pilot profile.
  rpc Update(PilotsUpdateParameters) returns (PilotsUpdateResult);
  // StartVerifyPhoneNumber starts the phone number verification process for a pilot profile.
  rpc StartVerifyPhoneNumber(PilotsStartVerifyPhoneNumberParameters) returns (PilotsStartVerifyPhoneNumberResult);
  // FinishVerifyPhoneNumber ends the phone number verification process for a pilot profile.
  rpc FinishVerifyPhoneNumber(PilotsFinishVerifyPhoneNumberParameters) returns (PilotsFinishVerifyPhoneNumberResult);
  // ListAircrafts queries the list of aircrafts owned by a pilot.
  rpc ListAircrafts(PilotsListAircraftsParameters) returns (PilotsListAircraftsResult);
  // AddAircraft associates a new aircraft with a pilot.
  rpc AddAircraft(PilotsAddAircraftParameters) returns (PilotsAddAircraftResult);
  // DeleteAircraft aircraft removes an aircraft from a pilot profile.
  rpc DeleteAircraft(PilotsDeleteAircraftParameters) returns (PilotsDeleteAircraftResult);
  // UpdateAircraft updates the properties of an aircraft associated with a pilot.
  rpc UpdateAircraft(PilotsUpdateAircraftParameters) returns (PilotsUpdateAircraftResult);
}
