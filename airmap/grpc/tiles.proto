/*
 * Schema for raw airspace tiles (not for visualisation, i.e.: not mapbox tile - this is  simple division of the Airspace db)
 */
syntax = "proto3";

package grpc;

import "google/protobuf/timestamp.proto";
import "wgs84.proto";
import "units.proto";
import "rules.proto";

message TiledGeometry {
  // Well Known Binary representation of this portion of the geometry that intersects
  // with the tile.

  // http://edndoc.esri.com/arcsde/9.1/general_topics/wkb_representation.htm
  // which may be seen controvesial, i.e.:
  // - not the most efficient; no delta encoding, see: https://github.com/mapbox/geobuf
  // - opaque in message
  // - however: very well supported in the industry
  bytes wkb            = 1;

  //The bounds of the WHOLE geometry to aid/optimise in preprocessing/filtering w/o
  //needing to process the (possibly lengthy) wkb.
  Bounds2D wholeBounds = 2;
}

message ClassificationCategory {
  string value = 1;
}

message ClassificationType {
  string value = 1;
}

message RestrictionType {
  string restrictionType = 1;
}

message AuthorizationLevel {
  uint64 authorizationLevel = 1;
}

message Schedule {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end   = 2;
}

message TiledAirspace {
  string uuid                                   = 1; // The unique id of the airspace in the context of AirMap
  ClassificationCategory classificationCategory = 2;
  Foot floor                                    = 3;
  Foot ceiling                                  = 4;
  ClassificationType classificationType         = 5;
  RestrictionType restrictionType               = 6;
  string name                                   = 7;
  bool isManaged                                = 8;
  bool isPropertyBoundary                       = 9;
  AuthorizationLevel authorizationLevel         = 10;
  bool authorization                            = 11;
  bool laanc                                    = 12;
  string url                                    = 13;
  string phone                                  = 14;
  Schedule schedule                             = 16;
  RuleId ruleId                                 = 17;
  string ruleUuid                               = 18;
  // The geometry describing the airspace - more specificaly the part
  // intersecting with the tile (to be merged based on TiledAirspace.id)
  TiledGeometry intersectingGeometry            = 100;
  uint64 id                                     = 101;  // Deprecated
}

message TiledJurisdiction {
  enum JurisdictionLevel {
    federal                = 0;
    state                  = 1;
    county                 = 2;
    city                   = 3;
    local                  = 4;
    federalBackup          = 5;
    federalStructureBackup = 6;
  };

  message Ruleset {
    enum RulesetType {
      required = 0;
      pick1    = 1;
      optional = 2;
    };

    string uid                             = 1;  // The human-readable unique identification of a ruleset.
    string name                            = 2;  // The displayable name of the ruleset.
    string shortName                       = 3;  // The type of ruleset in short form.
    string description                     = 4;  // The full description of the ruleset.
    RulesetType type                       = 5;  // The Type of ruleset this represents.
    repeated ClassificationCategory layers = 6;  // The list of classification categories this ruleset applies to.
    bool isDefaultRuleset                  = 7;  // The boolean of if this is the default ruleset.
  }

  string uuid                         = 1; // The unique id of the jurisdiction in the context of AirMap
  string name                         = 2; // The human-readable name of the jurisdiction.
  JurisdictionLevel jurisdictionLevel = 3; // The human-readable name of the level in jurisdiction hierarchy of Airmap.
  repeated Ruleset rulesets           = 4;

  // The geometry describing the jurisdiction - more specificaly the part
  // intersecting with the tile (to be merged based on TiledJurisdiction.id)
  TiledGeometry intersectingGeometry  = 5;

  uint64 id                           = 100; // Deprecated
}

message TileSetPreamble  {
  string Id      = 1; // id of the tileset this tile belongs to
  uint64 version = 2; // (monotonically increasing) version number of the tileset
}

message AirspaceTile {
  TileSetPreamble preamble         = 1;
  repeated TiledAirspace airspaces = 2; //List of airspaces in this tile
}

message JurisdictionTile {
  TileSetPreamble preamble                 = 1;
  repeated TiledJurisdiction jurisdictions = 2;  // A List of jurisditions in this tile.
}


message tileStoreMetadata {
  message Precission {
    float mapboxPixels       = 1; //scale of this tile relative to mapbox native resolution. Stating 2 means it's half the mapbox resolution
    Degrees pixel            = 2; //how many degrees does one pixel have on this tile
    Meters  metresOnEquator  = 3; //how many metres resolultion does this tile offer
  }
  message ZoomAndPrecission {
    uint32 zoom           = 1;
    Precission precission = 2; //if absent -> tile has no known resolution and contains untampered geometries
    Coordinate2D buffer   = 3; //buffer (in degrees) that geometries in every tileset's/zoom tile bleed to its neighbours
  }
  TileSetPreamble preamble                  = 1;
  string description                        = 2;  // description of this layer
  repeated ZoomAndPrecission availableZooms = 3;  // zooms available in the tile store
  repeated string sublayers                 = 5;  // Not sure how this will evolve, but we need to know, for
                                                  // each ruleset, what classification cats it has
  Bounds2D bounds                           = 6;  // Bounds where geometries can be found for this layer
}
