syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "geometry.proto";
import "icao.proto";
import "ids.proto";
import "units.proto";
import "wgs84.proto";

package grpc;

// Traffic bundles up types used for communicating information about surrounding traffic to ongoing flights.
message TrafficUpdate {
  // Source describes the source of an individual observation of an (aerial) vehicle.
  message Source {
    // Describes primary radar sources.
    message PrimaryRadar {
      // Empty on purpose
    }

    // Describes secondary radar sources.
    message SecondaryRadar {
      // Empty on purpose
    }

    // Describes fused primary and secondary radar sources.
    message PrimaryAndSecondaryRadar {
      // Empty on purpose
    }

    // Describes fused data sources.
    message Fused {
      repeated Source sources = 1;
    }

    // details provides further information about a source.
    oneof details {
      PrimaryRadar primary_radar     = 1;  // Marks a primary radar source.
      SecondaryRadar secondary_radar = 2;  // Marks a secondary radar source.
      Fused fused                    = 3;  // Marks multiple sources fused together.
    }
  }

  // Observation describes an individual observation of an (aerial) vehicle.
  message Observation {
    TrafficSourceId source_id               = 1;   // ID of the source reporting the observation.
    TrafficTrackId track_id                 = 2;   // Source-specific track identifier for the vehicle.
    string Origin                           = 3;   // Name of the facility that reported the observation.
    google.protobuf.Timestamp submitted     = 4;   // The time when the update was submitted from the client.
    google.protobuf.Timestamp observed      = 5;   // The time when the update was observed by the client.
    google.protobuf.Timestamp received      = 6;   // The time when the update was observed by AirMap.
    google.protobuf.Duration ttl            = 7;   // Time-to-live for this track, might be empty.
    ICAOAircraftDescriptor icao_description = 8;   // Aircraft-specific ICAO-information.
    string callsign                         = 9;   // Callsign of the vehicle.
    string registration                     = 10;  // Registration number of the vehicle.
    Coordinate position                     = 11;  // Position of the vehicle.
    MetersPerSecond speed_over_ground       = 12;  // Speed of the vehicle.
    MetersPerSecond vertical_speed          = 13;  // Vertical speed of the vehicle.
    Degrees course                          = 14;  // Course over ground relative to True North, 0-359
    Source source                           = 15;  // Describes the source for this observation.
    Velocity velocity                       = 16;  // Velocity of the vehicle expressed as XYZ vectors.
  }

  // ToClient models an individual update sent to clients concerning the state of surrounding traffic.
  message ToClient {
    // Type enumerates all known types of TrafficUpdate::ToClient.
    enum Relevance {
      unknown_type          = 0;  // Marks the unknown type.
      situational_awareness = 1;  // Marks updates that provide planning information to operators and vehicles.
      alert                 = 2;  // Marks updates about aircrafts that are likely to collide with the current aircraft.
    }

    // FlightReference bundles up flight-specific references for an individual update.
    message FlightReference {
      FlightId flight_id  = 1;  // The if of the flight in the context of AirMap.
      Degrees direction   = 2;  // The direction of the other aircraft in relation to the flight with flight_id.
      Relevance relevance = 3;  // The relevance of the update to the flight with flight_id.
    }

    TrackId track_id                           = 1;  // The unique id of the underlying track in the context of AirMap.
    string aircraft_id                         = 2;  // The 'other' aircraft's id.
    Coordinate position                        = 3;  // The position of the other aircraft.
    MetersPerSecond speed_over_ground          = 4;  // The speed over ground of the other aircraft in [m/s].
    Degrees course                             = 5;  // The heading of the other aircraft in [Â°].
    repeated FlightReference flight_references = 6;  // The flights (in the context of AirMap) that this update is relevant for.
    google.protobuf.Timestamp recorded         = 7;  // The time when the datum triggering the udpate was recorded.
    google.protobuf.Timestamp generated        = 8;  // The time when the update was generated.
  }

  // FromSource bundles up types used for communicating data from a source of traffic data to AirMap.
  message FromSource {
    repeated Observation observations = 1;  // Observations as recorded and submitted by a source.
  }

  // ToSource bundles up types used for communicating data to sources of traffic data.
  message ToSource {
    // Ack describes an acknowledgement of observations received from traffic data sources.
    message Ack {
      uint64 count                        = 2;  // Number of messages received by AirMap.
      google.protobuf.Timestamp submitted = 3;  // The time when the message was sent by AirMap.
    }

    Ack ack = 1;  // Acks for received messages.
  }

  // ToProcessor bundles up updates sent to traffic data processors.
  message ToProcessor {
    message FusedObservation {
      TrafficTrackId track_id                 = 1;  // The unique id of the fused track.
      ICAOAircraftDescriptor icao_description = 2;  // Aircraft-specific ICAO-information.
      string callsign                         = 3;  // Callsign of the vehicle.
      string registration                     = 4;  // Registration number of the vehicle.
      bool shadowed                           = 5;  // Indicates whether the original observation is the latest for the fused track.
      TrafficUpdate.Observation original      = 6;  // The original observation.
      TrafficUpdate.Observation latest        = 7;  // The best observation in the fused track, only set if shadowed is true.
    }

    repeated FusedObservation observations = 1;  // Collection of observations in this update.
  }
}

// RegisterProcessorParameters bundles up parameters for a call to RegisterProcessor.
message RegisterProcessorParameters {
  // Empty on purpose
}

// TrafficCollector offers functionality to feed (aerial) traffic updates to AirMap.
service TrafficCollector {
  // RegisterSource registers a source for bi-directional streaming of updates.
  rpc RegisterSource(stream TrafficUpdate.FromSource) returns (stream TrafficUpdate.ToSource);
  // RegisterProcessor registers a processor of traffic updates.
  rpc RegisterProcessor(RegisterProcessorParameters) returns (stream TrafficUpdate.ToProcessor);
}