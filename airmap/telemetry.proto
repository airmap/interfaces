// Copyright 2018 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "measurements.proto";

package airmap;

// TelemetryService exposes services that enable the reporting of telematic data.
service TelemetryService {
  rpc StreamUpdates(stream Telemetry.Update.FromClient) returns (stream Telemetry.Update.FromService);
}

// Telemetry bundles up types used for reporting telematic data.
message Telemetry {

  // Report models a measurement at a given point in time.
  message Report {
    google.protobuf.Timestamp observed = 1;  // The timestamp of the report.
    // details is a discriminated union of all measurement types.
    oneof details {
      Spatial spatial                  = 2;
      Atmospheric atmospheric          = 3;
    }

    // Spatial bundles geospatial measurements.
    message Spatial {
      Position position       = 1;                       // A positional measurement.
      Velocity velocity       = 2  [(nullable) = true];  // A velocity measurement.
      Orientation orientation = 3  [(nullable) = true];  // An orientation/attitude measurement.
    }
  
    // Spatial bundles atmospheric measurements at a given position.
    message Atmospheric {
      Position position      = 1;  // A positional measurement.
      Atmosphere atmosphere  = 2;  // An atmospheric measurement.
    }
  }

  // Update bundles types used in the exchange of telemetry reports.
  message Update {
    // FromClient models a batch of reports observed and sent to a telemetry service.
    message FromClient {
      google.protobuf.Timestamp submitted  = 1;  // The timestamp of when the update was submitted by the client.
      repeated Report reports              = 2;
    }
    // FromService models communication back to a telemetry client.
    message FromService {
      // Ack models an acknowledgement of updates received by the service.
      message Ack {
        uint64 count                         = 1;  // Number of updates received.
        google.protobuf.Timestamp submitted  = 2;  // The time when the message was sent to the client by the service.
      }
      Ack ack = 1;  // Ack for received update.
    }
  }
}
