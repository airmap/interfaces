// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tracking/collector.proto

package tracking // import "github.com/airmap/interfaces/src/go/tracking"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/airmap/interfaces/src/go"
import system "github.com/airmap/interfaces/src/go/system"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Update bundles types used in the exchange of tracks.
type Update struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1990b6ffc7b84c7c, []int{0}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update.Unmarshal(m, b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update.Marshal(b, m, deterministic)
}
func (dst *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(dst, src)
}
func (m *Update) XXX_Size() int {
	return xxx_messageInfo_Update.Size(m)
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

// FromProvider wraps messages being sent by a provider to a traffic collector.
type Update_FromProvider struct {
	// Types that are valid to be assigned to Details:
	//	*Update_FromProvider_Status
	//	*Update_FromProvider_Batch
	Details              isUpdate_FromProvider_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Update_FromProvider) Reset()         { *m = Update_FromProvider{} }
func (m *Update_FromProvider) String() string { return proto.CompactTextString(m) }
func (*Update_FromProvider) ProtoMessage()    {}
func (*Update_FromProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1990b6ffc7b84c7c, []int{0, 0}
}
func (m *Update_FromProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_FromProvider.Unmarshal(m, b)
}
func (m *Update_FromProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_FromProvider.Marshal(b, m, deterministic)
}
func (dst *Update_FromProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_FromProvider.Merge(dst, src)
}
func (m *Update_FromProvider) XXX_Size() int {
	return xxx_messageInfo_Update_FromProvider.Size(m)
}
func (m *Update_FromProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_FromProvider.DiscardUnknown(m)
}

var xxx_messageInfo_Update_FromProvider proto.InternalMessageInfo

type isUpdate_FromProvider_Details interface {
	isUpdate_FromProvider_Details()
}

type Update_FromProvider_Status struct {
	Status *system.Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type Update_FromProvider_Batch struct {
	Batch *Track_Batch `protobuf:"bytes,2,opt,name=batch,proto3,oneof"`
}

func (*Update_FromProvider_Status) isUpdate_FromProvider_Details() {}

func (*Update_FromProvider_Batch) isUpdate_FromProvider_Details() {}

func (m *Update_FromProvider) GetDetails() isUpdate_FromProvider_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_FromProvider) GetStatus() *system.Status {
	if x, ok := m.GetDetails().(*Update_FromProvider_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Update_FromProvider) GetBatch() *Track_Batch {
	if x, ok := m.GetDetails().(*Update_FromProvider_Batch); ok {
		return x.Batch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update_FromProvider) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_FromProvider_OneofMarshaler, _Update_FromProvider_OneofUnmarshaler, _Update_FromProvider_OneofSizer, []interface{}{
		(*Update_FromProvider_Status)(nil),
		(*Update_FromProvider_Batch)(nil),
	}
}

func _Update_FromProvider_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update_FromProvider)
	// details
	switch x := m.Details.(type) {
	case *Update_FromProvider_Status:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Update_FromProvider_Batch:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Batch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Update_FromProvider.Details has unexpected type %T", x)
	}
	return nil
}

func _Update_FromProvider_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update_FromProvider)
	switch tag {
	case 1: // details.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(system.Status)
		err := b.DecodeMessage(msg)
		m.Details = &Update_FromProvider_Status{msg}
		return true, err
	case 2: // details.batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Track_Batch)
		err := b.DecodeMessage(msg)
		m.Details = &Update_FromProvider_Batch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Update_FromProvider_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update_FromProvider)
	// details
	switch x := m.Details.(type) {
	case *Update_FromProvider_Status:
		s := proto.Size(x.Status)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_FromProvider_Batch:
		s := proto.Size(x.Batch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ToProvider wraps messages being sent from a collector back to a provider.
type Update_ToProvider struct {
	// Types that are valid to be assigned to Details:
	//	*Update_ToProvider_Status
	//	*Update_ToProvider_Ack
	Details              isUpdate_ToProvider_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Update_ToProvider) Reset()         { *m = Update_ToProvider{} }
func (m *Update_ToProvider) String() string { return proto.CompactTextString(m) }
func (*Update_ToProvider) ProtoMessage()    {}
func (*Update_ToProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1990b6ffc7b84c7c, []int{0, 1}
}
func (m *Update_ToProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_ToProvider.Unmarshal(m, b)
}
func (m *Update_ToProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_ToProvider.Marshal(b, m, deterministic)
}
func (dst *Update_ToProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_ToProvider.Merge(dst, src)
}
func (m *Update_ToProvider) XXX_Size() int {
	return xxx_messageInfo_Update_ToProvider.Size(m)
}
func (m *Update_ToProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_ToProvider.DiscardUnknown(m)
}

var xxx_messageInfo_Update_ToProvider proto.InternalMessageInfo

type isUpdate_ToProvider_Details interface {
	isUpdate_ToProvider_Details()
}

type Update_ToProvider_Status struct {
	Status *system.Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type Update_ToProvider_Ack struct {
	Ack *system.Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*Update_ToProvider_Status) isUpdate_ToProvider_Details() {}

func (*Update_ToProvider_Ack) isUpdate_ToProvider_Details() {}

func (m *Update_ToProvider) GetDetails() isUpdate_ToProvider_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_ToProvider) GetStatus() *system.Status {
	if x, ok := m.GetDetails().(*Update_ToProvider_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Update_ToProvider) GetAck() *system.Ack {
	if x, ok := m.GetDetails().(*Update_ToProvider_Ack); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update_ToProvider) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_ToProvider_OneofMarshaler, _Update_ToProvider_OneofUnmarshaler, _Update_ToProvider_OneofSizer, []interface{}{
		(*Update_ToProvider_Status)(nil),
		(*Update_ToProvider_Ack)(nil),
	}
}

func _Update_ToProvider_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update_ToProvider)
	// details
	switch x := m.Details.(type) {
	case *Update_ToProvider_Status:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Update_ToProvider_Ack:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Update_ToProvider.Details has unexpected type %T", x)
	}
	return nil
}

func _Update_ToProvider_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update_ToProvider)
	switch tag {
	case 1: // details.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(system.Status)
		err := b.DecodeMessage(msg)
		m.Details = &Update_ToProvider_Status{msg}
		return true, err
	case 2: // details.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(system.Ack)
		err := b.DecodeMessage(msg)
		m.Details = &Update_ToProvider_Ack{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Update_ToProvider_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update_ToProvider)
	// details
	switch x := m.Details.(type) {
	case *Update_ToProvider_Status:
		s := proto.Size(x.Status)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_ToProvider_Ack:
		s := proto.Size(x.Ack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ToProcessor wraps messages being sent by a collector to a processor.
type Update_ToProcessor struct {
	// Types that are valid to be assigned to Details:
	//	*Update_ToProcessor_Status
	//	*Update_ToProcessor_Batch
	Details              isUpdate_ToProcessor_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *Update_ToProcessor) Reset()         { *m = Update_ToProcessor{} }
func (m *Update_ToProcessor) String() string { return proto.CompactTextString(m) }
func (*Update_ToProcessor) ProtoMessage()    {}
func (*Update_ToProcessor) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1990b6ffc7b84c7c, []int{0, 2}
}
func (m *Update_ToProcessor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_ToProcessor.Unmarshal(m, b)
}
func (m *Update_ToProcessor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_ToProcessor.Marshal(b, m, deterministic)
}
func (dst *Update_ToProcessor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_ToProcessor.Merge(dst, src)
}
func (m *Update_ToProcessor) XXX_Size() int {
	return xxx_messageInfo_Update_ToProcessor.Size(m)
}
func (m *Update_ToProcessor) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_ToProcessor.DiscardUnknown(m)
}

var xxx_messageInfo_Update_ToProcessor proto.InternalMessageInfo

type isUpdate_ToProcessor_Details interface {
	isUpdate_ToProcessor_Details()
}

type Update_ToProcessor_Status struct {
	Status *system.Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type Update_ToProcessor_Batch struct {
	Batch *Track_Batch `protobuf:"bytes,2,opt,name=batch,proto3,oneof"`
}

func (*Update_ToProcessor_Status) isUpdate_ToProcessor_Details() {}

func (*Update_ToProcessor_Batch) isUpdate_ToProcessor_Details() {}

func (m *Update_ToProcessor) GetDetails() isUpdate_ToProcessor_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_ToProcessor) GetStatus() *system.Status {
	if x, ok := m.GetDetails().(*Update_ToProcessor_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Update_ToProcessor) GetBatch() *Track_Batch {
	if x, ok := m.GetDetails().(*Update_ToProcessor_Batch); ok {
		return x.Batch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update_ToProcessor) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_ToProcessor_OneofMarshaler, _Update_ToProcessor_OneofUnmarshaler, _Update_ToProcessor_OneofSizer, []interface{}{
		(*Update_ToProcessor_Status)(nil),
		(*Update_ToProcessor_Batch)(nil),
	}
}

func _Update_ToProcessor_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update_ToProcessor)
	// details
	switch x := m.Details.(type) {
	case *Update_ToProcessor_Status:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Update_ToProcessor_Batch:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Batch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Update_ToProcessor.Details has unexpected type %T", x)
	}
	return nil
}

func _Update_ToProcessor_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update_ToProcessor)
	switch tag {
	case 1: // details.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(system.Status)
		err := b.DecodeMessage(msg)
		m.Details = &Update_ToProcessor_Status{msg}
		return true, err
	case 2: // details.batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Track_Batch)
		err := b.DecodeMessage(msg)
		m.Details = &Update_ToProcessor_Batch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Update_ToProcessor_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update_ToProcessor)
	// details
	switch x := m.Details.(type) {
	case *Update_ToProcessor_Status:
		s := proto.Size(x.Status)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_ToProcessor_Batch:
		s := proto.Size(x.Batch)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Update_FromProcessor struct {
	// Types that are valid to be assigned to Details:
	//	*Update_FromProcessor_Status
	//	*Update_FromProcessor_Ack
	Details              isUpdate_FromProcessor_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *Update_FromProcessor) Reset()         { *m = Update_FromProcessor{} }
func (m *Update_FromProcessor) String() string { return proto.CompactTextString(m) }
func (*Update_FromProcessor) ProtoMessage()    {}
func (*Update_FromProcessor) Descriptor() ([]byte, []int) {
	return fileDescriptor_collector_1990b6ffc7b84c7c, []int{0, 3}
}
func (m *Update_FromProcessor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_FromProcessor.Unmarshal(m, b)
}
func (m *Update_FromProcessor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_FromProcessor.Marshal(b, m, deterministic)
}
func (dst *Update_FromProcessor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_FromProcessor.Merge(dst, src)
}
func (m *Update_FromProcessor) XXX_Size() int {
	return xxx_messageInfo_Update_FromProcessor.Size(m)
}
func (m *Update_FromProcessor) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_FromProcessor.DiscardUnknown(m)
}

var xxx_messageInfo_Update_FromProcessor proto.InternalMessageInfo

type isUpdate_FromProcessor_Details interface {
	isUpdate_FromProcessor_Details()
}

type Update_FromProcessor_Status struct {
	Status *system.Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type Update_FromProcessor_Ack struct {
	Ack *system.Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*Update_FromProcessor_Status) isUpdate_FromProcessor_Details() {}

func (*Update_FromProcessor_Ack) isUpdate_FromProcessor_Details() {}

func (m *Update_FromProcessor) GetDetails() isUpdate_FromProcessor_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_FromProcessor) GetStatus() *system.Status {
	if x, ok := m.GetDetails().(*Update_FromProcessor_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Update_FromProcessor) GetAck() *system.Ack {
	if x, ok := m.GetDetails().(*Update_FromProcessor_Ack); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update_FromProcessor) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_FromProcessor_OneofMarshaler, _Update_FromProcessor_OneofUnmarshaler, _Update_FromProcessor_OneofSizer, []interface{}{
		(*Update_FromProcessor_Status)(nil),
		(*Update_FromProcessor_Ack)(nil),
	}
}

func _Update_FromProcessor_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update_FromProcessor)
	// details
	switch x := m.Details.(type) {
	case *Update_FromProcessor_Status:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Update_FromProcessor_Ack:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Update_FromProcessor.Details has unexpected type %T", x)
	}
	return nil
}

func _Update_FromProcessor_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update_FromProcessor)
	switch tag {
	case 1: // details.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(system.Status)
		err := b.DecodeMessage(msg)
		m.Details = &Update_FromProcessor_Status{msg}
		return true, err
	case 2: // details.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(system.Ack)
		err := b.DecodeMessage(msg)
		m.Details = &Update_FromProcessor_Ack{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Update_FromProcessor_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update_FromProcessor)
	// details
	switch x := m.Details.(type) {
	case *Update_FromProcessor_Status:
		s := proto.Size(x.Status)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_FromProcessor_Ack:
		s := proto.Size(x.Ack)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Update)(nil), "tracking.Update")
	proto.RegisterType((*Update_FromProvider)(nil), "tracking.Update.FromProvider")
	proto.RegisterType((*Update_ToProvider)(nil), "tracking.Update.ToProvider")
	proto.RegisterType((*Update_ToProcessor)(nil), "tracking.Update.ToProcessor")
	proto.RegisterType((*Update_FromProcessor)(nil), "tracking.Update.FromProcessor")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorClient interface {
	// ConnectProvider connects a stream of updates from a provider to a collector.
	ConnectProvider(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectProviderClient, error)
	// ConnectProcessor connects a stream of updates from a collector to a processor.
	ConnectProcessor(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectProcessorClient, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) ConnectProvider(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectProviderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collector_serviceDesc.Streams[0], "/tracking.Collector/ConnectProvider", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorConnectProviderClient{stream}
	return x, nil
}

type Collector_ConnectProviderClient interface {
	Send(*Update_FromProvider) error
	Recv() (*Update_ToProvider, error)
	grpc.ClientStream
}

type collectorConnectProviderClient struct {
	grpc.ClientStream
}

func (x *collectorConnectProviderClient) Send(m *Update_FromProvider) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorConnectProviderClient) Recv() (*Update_ToProvider, error) {
	m := new(Update_ToProvider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorClient) ConnectProcessor(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectProcessorClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collector_serviceDesc.Streams[1], "/tracking.Collector/ConnectProcessor", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorConnectProcessorClient{stream}
	return x, nil
}

type Collector_ConnectProcessorClient interface {
	Send(*Update_FromProcessor) error
	Recv() (*Update_ToProcessor, error)
	grpc.ClientStream
}

type collectorConnectProcessorClient struct {
	grpc.ClientStream
}

func (x *collectorConnectProcessorClient) Send(m *Update_FromProcessor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorConnectProcessorClient) Recv() (*Update_ToProcessor, error) {
	m := new(Update_ToProcessor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
type CollectorServer interface {
	// ConnectProvider connects a stream of updates from a provider to a collector.
	ConnectProvider(Collector_ConnectProviderServer) error
	// ConnectProcessor connects a stream of updates from a collector to a processor.
	ConnectProcessor(Collector_ConnectProcessorServer) error
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_ConnectProvider_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).ConnectProvider(&collectorConnectProviderServer{stream})
}

type Collector_ConnectProviderServer interface {
	Send(*Update_ToProvider) error
	Recv() (*Update_FromProvider, error)
	grpc.ServerStream
}

type collectorConnectProviderServer struct {
	grpc.ServerStream
}

func (x *collectorConnectProviderServer) Send(m *Update_ToProvider) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorConnectProviderServer) Recv() (*Update_FromProvider, error) {
	m := new(Update_FromProvider)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Collector_ConnectProcessor_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).ConnectProcessor(&collectorConnectProcessorServer{stream})
}

type Collector_ConnectProcessorServer interface {
	Send(*Update_ToProcessor) error
	Recv() (*Update_FromProcessor, error)
	grpc.ServerStream
}

type collectorConnectProcessorServer struct {
	grpc.ServerStream
}

func (x *collectorConnectProcessorServer) Send(m *Update_ToProcessor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorConnectProcessorServer) Recv() (*Update_FromProcessor, error) {
	m := new(Update_FromProcessor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectProvider",
			Handler:       _Collector_ConnectProvider_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConnectProcessor",
			Handler:       _Collector_ConnectProcessor_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tracking/collector.proto",
}

func init() { proto.RegisterFile("tracking/collector.proto", fileDescriptor_collector_1990b6ffc7b84c7c) }

var fileDescriptor_collector_1990b6ffc7b84c7c = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xcb, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x19, 0x89, 0x28, 0x07, 0x2f, 0x64, 0xd4, 0x84, 0x8c, 0xd7, 0xb8, 0x62, 0xa1, 0xad,
	0xc1, 0x27, 0x10, 0x12, 0xc3, 0x52, 0x11, 0x37, 0xee, 0x3a, 0xa5, 0x42, 0x33, 0xcc, 0x1c, 0x6c,
	0x0f, 0x46, 0xdf, 0xcb, 0x95, 0x4f, 0x67, 0x98, 0x4e, 0x81, 0x44, 0x5d, 0xe0, 0xc2, 0x5d, 0xf3,
	0xff, 0x27, 0xdf, 0xdf, 0x73, 0x81, 0x06, 0x19, 0x21, 0x13, 0x9d, 0x0d, 0xb9, 0xc4, 0xf1, 0x58,
	0x49, 0x42, 0xc3, 0x26, 0x06, 0x09, 0xc3, 0x4d, 0xef, 0x44, 0x75, 0xf5, 0x46, 0x2a, 0xb3, 0x1a,
	0x33, 0xeb, 0xbc, 0x68, 0xcf, 0xbe, 0x5b, 0x52, 0x29, 0xb7, 0x24, 0x68, 0xea, 0xc5, 0x7a, 0x21,
	0x0a, 0x99, 0x14, 0xca, 0xfe, 0x1c, 0x9e, 0x3f, 0x9c, 0x7a, 0xfe, 0x59, 0x86, 0xca, 0xe3, 0x64,
	0x20, 0x48, 0x45, 0x06, 0xb6, 0x6e, 0x0d, 0xa6, 0x77, 0x06, 0x5f, 0xf5, 0x40, 0x99, 0xb0, 0x09,
	0x15, 0x87, 0x6c, 0x04, 0x67, 0x41, 0xb3, 0xd6, 0xda, 0x61, 0x8e, 0xc9, 0x1e, 0x72, 0xb5, 0x5b,
	0xea, 0x15, 0x7e, 0x78, 0x09, 0xeb, 0xb1, 0x20, 0x39, 0x6a, 0xac, 0xe5, 0x85, 0x07, 0xcc, 0x47,
	0xb1, 0x7e, 0x1e, 0xd5, 0x9e, 0x99, 0xdd, 0x52, 0xcf, 0x55, 0xb5, 0xab, 0xb0, 0x31, 0x50, 0x24,
	0xf4, 0xd8, 0x46, 0x31, 0x40, 0x1f, 0xff, 0x90, 0x78, 0x0a, 0x65, 0x21, 0x93, 0x22, 0xaf, 0xe6,
	0xcb, 0x6e, 0x64, 0xd2, 0x2d, 0xf5, 0x66, 0xce, 0x72, 0xc6, 0x0b, 0xd4, 0xf2, 0x0c, 0xa9, 0xac,
	0xc5, 0xff, 0x69, 0x4b, 0xc1, 0x76, 0x31, 0xca, 0x95, 0x43, 0x57, 0xe8, 0xac, 0xf5, 0x11, 0x40,
	0xb5, 0xe3, 0x2f, 0x25, 0xbc, 0x87, 0xdd, 0x0e, 0x66, 0x99, 0x92, 0x34, 0x1f, 0xe8, 0xf1, 0xe2,
	0xcb, 0x6e, 0xc9, 0x6c, 0x79, 0xc3, 0xd1, 0xe1, 0x37, 0x7b, 0xb1, 0x8c, 0x66, 0x70, 0x15, 0x84,
	0x7d, 0xa8, 0x2f, 0x90, 0x45, 0x2b, 0x27, 0xbf, 0x31, 0x9d, 0x1f, 0x1d, 0xfd, 0x0c, 0x75, 0xee,
	0x8c, 0xda, 0x66, 0x4f, 0x17, 0x43, 0x4d, 0xa3, 0x69, 0xcc, 0x24, 0xa6, 0x5c, 0x68, 0x93, 0x8a,
	0x09, 0xd7, 0x19, 0x29, 0xf3, 0x2c, 0xa4, 0xb2, 0xdc, 0x1a, 0xc9, 0x87, 0xc8, 0x3d, 0x26, 0xae,
	0xe4, 0xa7, 0x7a, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x35, 0xac, 0x18, 0x37, 0x1f, 0x03, 0x00,
	0x00,
}
