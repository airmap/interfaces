// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry/collector.proto

package telemetry

import (
	context "context"
	fmt "fmt"
	_ "github.com/airmap/interfaces/src/go"
	system "github.com/airmap/interfaces/src/go/system"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Update wraps types used in the exchange of updates with a telemetry collector.
type Update struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f4f365628b62e0, []int{0}
}

func (m *Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update.Unmarshal(m, b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update.Marshal(b, m, deterministic)
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return xxx_messageInfo_Update.Size(m)
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

type Update_FromAircraft struct {
	// details is a discriminated union of all measurement types.
	//
	// Types that are valid to be assigned to Details:
	//	*Update_FromAircraft_Report
	Details              isUpdate_FromAircraft_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Update_FromAircraft) Reset()         { *m = Update_FromAircraft{} }
func (m *Update_FromAircraft) String() string { return proto.CompactTextString(m) }
func (*Update_FromAircraft) ProtoMessage()    {}
func (*Update_FromAircraft) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f4f365628b62e0, []int{0, 0}
}

func (m *Update_FromAircraft) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_FromAircraft.Unmarshal(m, b)
}
func (m *Update_FromAircraft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_FromAircraft.Marshal(b, m, deterministic)
}
func (m *Update_FromAircraft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_FromAircraft.Merge(m, src)
}
func (m *Update_FromAircraft) XXX_Size() int {
	return xxx_messageInfo_Update_FromAircraft.Size(m)
}
func (m *Update_FromAircraft) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_FromAircraft.DiscardUnknown(m)
}

var xxx_messageInfo_Update_FromAircraft proto.InternalMessageInfo

type isUpdate_FromAircraft_Details interface {
	isUpdate_FromAircraft_Details()
}

type Update_FromAircraft_Report struct {
	Report *Report `protobuf:"bytes,1,opt,name=report,proto3,oneof"`
}

func (*Update_FromAircraft_Report) isUpdate_FromAircraft_Details() {}

func (m *Update_FromAircraft) GetDetails() isUpdate_FromAircraft_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_FromAircraft) GetReport() *Report {
	if x, ok := m.GetDetails().(*Update_FromAircraft_Report); ok {
		return x.Report
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Update_FromAircraft) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Update_FromAircraft_Report)(nil),
	}
}

// ToAircraft wraps messages being sent from a collector back to an aircraft.
type Update_ToAircraft struct {
	// Types that are valid to be assigned to Details:
	//	*Update_ToAircraft_Status
	//	*Update_ToAircraft_Ack
	Details              isUpdate_ToAircraft_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Update_ToAircraft) Reset()         { *m = Update_ToAircraft{} }
func (m *Update_ToAircraft) String() string { return proto.CompactTextString(m) }
func (*Update_ToAircraft) ProtoMessage()    {}
func (*Update_ToAircraft) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f4f365628b62e0, []int{0, 1}
}

func (m *Update_ToAircraft) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_ToAircraft.Unmarshal(m, b)
}
func (m *Update_ToAircraft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_ToAircraft.Marshal(b, m, deterministic)
}
func (m *Update_ToAircraft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_ToAircraft.Merge(m, src)
}
func (m *Update_ToAircraft) XXX_Size() int {
	return xxx_messageInfo_Update_ToAircraft.Size(m)
}
func (m *Update_ToAircraft) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_ToAircraft.DiscardUnknown(m)
}

var xxx_messageInfo_Update_ToAircraft proto.InternalMessageInfo

type isUpdate_ToAircraft_Details interface {
	isUpdate_ToAircraft_Details()
}

type Update_ToAircraft_Status struct {
	Status *system.Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type Update_ToAircraft_Ack struct {
	Ack *system.Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*Update_ToAircraft_Status) isUpdate_ToAircraft_Details() {}

func (*Update_ToAircraft_Ack) isUpdate_ToAircraft_Details() {}

func (m *Update_ToAircraft) GetDetails() isUpdate_ToAircraft_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_ToAircraft) GetStatus() *system.Status {
	if x, ok := m.GetDetails().(*Update_ToAircraft_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Update_ToAircraft) GetAck() *system.Ack {
	if x, ok := m.GetDetails().(*Update_ToAircraft_Ack); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Update_ToAircraft) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Update_ToAircraft_Status)(nil),
		(*Update_ToAircraft_Ack)(nil),
	}
}

func init() {
	proto.RegisterType((*Update)(nil), "telemetry.Update")
	proto.RegisterType((*Update_FromAircraft)(nil), "telemetry.Update.FromAircraft")
	proto.RegisterType((*Update_ToAircraft)(nil), "telemetry.Update.ToAircraft")
}

func init() { proto.RegisterFile("telemetry/collector.proto", fileDescriptor_42f4f365628b62e0) }

var fileDescriptor_42f4f365628b62e0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0xc6, 0x57, 0x85, 0x4a, 0x33, 0xd1, 0x59, 0x41, 0x66, 0x11, 0x15, 0xaf, 0x0a, 0x62, 0x22,
	0xf3, 0x09, 0xb6, 0xc1, 0xd8, 0x75, 0xa7, 0x37, 0x5e, 0x99, 0x66, 0x67, 0x33, 0xf4, 0x4f, 0xca,
	0xc9, 0x19, 0xb8, 0xf7, 0xf2, 0x01, 0x65, 0x4d, 0xdb, 0x15, 0xbc, 0xfd, 0x7e, 0x1f, 0xbf, 0x7c,
	0x39, 0xec, 0x96, 0x20, 0x87, 0x02, 0x08, 0xf7, 0x42, 0x99, 0x3c, 0x07, 0x45, 0x06, 0x79, 0x85,
	0x86, 0x4c, 0x18, 0x74, 0x28, 0x1a, 0xc1, 0x0f, 0x41, 0x69, 0xb5, 0x29, 0xad, 0x83, 0xd1, 0xb5,
	0xdd, 0x5b, 0x82, 0x42, 0x58, 0x92, 0xb4, 0x6b, 0xc3, 0x51, 0x13, 0x4a, 0x95, 0x35, 0xc9, 0xcd,
	0x51, 0x8f, 0x50, 0x19, 0x24, 0x97, 0x3f, 0xfd, 0x7a, 0xcc, 0xff, 0xa8, 0xd6, 0x92, 0x20, 0x5a,
	0xb0, 0xf3, 0x05, 0x9a, 0x62, 0xaa, 0x51, 0xa1, 0xdc, 0x50, 0xf8, 0xcc, 0x7c, 0x57, 0x1d, 0x7b,
	0x8f, 0x5e, 0x3c, 0x9c, 0x5c, 0xf1, 0xce, 0xc1, 0x93, 0x1a, 0x2c, 0x07, 0x49, 0x53, 0x99, 0x05,
	0xec, 0x6c, 0x0d, 0x24, 0x75, 0x6e, 0xa3, 0x94, 0xb1, 0x77, 0xd3, 0x59, 0x62, 0xe6, 0xbb, 0x69,
	0x8d, 0xe5, 0x82, 0xbb, 0x6d, 0x7c, 0x55, 0xa7, 0x07, 0x85, 0xe3, 0xe1, 0x03, 0x3b, 0x95, 0x2a,
	0x1b, 0x9f, 0xd4, 0xb5, 0x61, 0x5b, 0x9b, 0xaa, 0x6c, 0x39, 0x48, 0x0e, 0xa4, 0xf7, 0xc6, 0xe4,
	0x8b, 0x05, 0xf3, 0xf6, 0x4a, 0xe1, 0x8a, 0x5d, 0xce, 0x4d, 0x59, 0x82, 0xa2, 0xee, 0xd5, 0xfb,
	0xde, 0x56, 0xf7, 0x3d, 0xde, 0xff, 0x5b, 0x74, 0xf7, 0x9f, 0x1f, 0x37, 0xc7, 0xde, 0xab, 0x37,
	0x13, 0x9f, 0x2f, 0x5b, 0x4d, 0xdf, 0xbb, 0x94, 0x2b, 0x53, 0x08, 0xa9, 0xb1, 0x90, 0x95, 0xd0,
	0x25, 0x01, 0x6e, 0xa4, 0x02, 0x2b, 0x2c, 0x2a, 0xb1, 0x35, 0xa2, 0xd3, 0xa4, 0x7e, 0x7d, 0xd0,
	0xb7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x02, 0x77, 0x4a, 0xc9, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorClient interface {
	// ConnectAircraft connects a stream of updates from an aircraft to a collector
	ConnectAircraft(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectAircraftClient, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) ConnectAircraft(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectAircraftClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collector_serviceDesc.Streams[0], "/telemetry.Collector/ConnectAircraft", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorConnectAircraftClient{stream}
	return x, nil
}

type Collector_ConnectAircraftClient interface {
	Send(*Update_FromAircraft) error
	Recv() (*Update_ToAircraft, error)
	grpc.ClientStream
}

type collectorConnectAircraftClient struct {
	grpc.ClientStream
}

func (x *collectorConnectAircraftClient) Send(m *Update_FromAircraft) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorConnectAircraftClient) Recv() (*Update_ToAircraft, error) {
	m := new(Update_ToAircraft)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
type CollectorServer interface {
	// ConnectAircraft connects a stream of updates from an aircraft to a collector
	ConnectAircraft(Collector_ConnectAircraftServer) error
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_ConnectAircraft_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).ConnectAircraft(&collectorConnectAircraftServer{stream})
}

type Collector_ConnectAircraftServer interface {
	Send(*Update_ToAircraft) error
	Recv() (*Update_FromAircraft, error)
	grpc.ServerStream
}

type collectorConnectAircraftServer struct {
	grpc.ServerStream
}

func (x *collectorConnectAircraftServer) Send(m *Update_ToAircraft) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorConnectAircraftServer) Recv() (*Update_FromAircraft, error) {
	m := new(Update_FromAircraft)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectAircraft",
			Handler:       _Collector_ConnectAircraft_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "telemetry/collector.proto",
}
