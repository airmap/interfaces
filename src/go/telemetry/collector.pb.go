// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry/collector.proto

package telemetry

import (
	context "context"
	fmt "fmt"
	system "github.com/airmap/interfaces/src/go/system"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Update wraps types used in the exchange of telemetry updates with a collector.
type Update struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Update) Reset()         { *m = Update{} }
func (m *Update) String() string { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()    {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f4f365628b62e0, []int{0}
}

func (m *Update) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update.Unmarshal(m, b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update.Marshal(b, m, deterministic)
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return xxx_messageInfo_Update.Size(m)
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

// FromProvider wraps messages being sent from a provider to a collector.
type Update_FromProvider struct {
	// Types that are valid to be assigned to Details:
	//	*Update_FromProvider_Status
	//	*Update_FromProvider_Report
	Details              isUpdate_FromProvider_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *Update_FromProvider) Reset()         { *m = Update_FromProvider{} }
func (m *Update_FromProvider) String() string { return proto.CompactTextString(m) }
func (*Update_FromProvider) ProtoMessage()    {}
func (*Update_FromProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f4f365628b62e0, []int{0, 0}
}

func (m *Update_FromProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_FromProvider.Unmarshal(m, b)
}
func (m *Update_FromProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_FromProvider.Marshal(b, m, deterministic)
}
func (m *Update_FromProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_FromProvider.Merge(m, src)
}
func (m *Update_FromProvider) XXX_Size() int {
	return xxx_messageInfo_Update_FromProvider.Size(m)
}
func (m *Update_FromProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_FromProvider.DiscardUnknown(m)
}

var xxx_messageInfo_Update_FromProvider proto.InternalMessageInfo

type isUpdate_FromProvider_Details interface {
	isUpdate_FromProvider_Details()
}

type Update_FromProvider_Status struct {
	Status *system.Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type Update_FromProvider_Report struct {
	Report *Report `protobuf:"bytes,2,opt,name=report,proto3,oneof"`
}

func (*Update_FromProvider_Status) isUpdate_FromProvider_Details() {}

func (*Update_FromProvider_Report) isUpdate_FromProvider_Details() {}

func (m *Update_FromProvider) GetDetails() isUpdate_FromProvider_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_FromProvider) GetStatus() *system.Status {
	if x, ok := m.GetDetails().(*Update_FromProvider_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Update_FromProvider) GetReport() *Report {
	if x, ok := m.GetDetails().(*Update_FromProvider_Report); ok {
		return x.Report
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Update_FromProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Update_FromProvider_Status)(nil),
		(*Update_FromProvider_Report)(nil),
	}
}

// ToProvider wraps messages being sent from a collector back to a provider.
type Update_ToProvider struct {
	// Types that are valid to be assigned to Details:
	//	*Update_ToProvider_Status
	//	*Update_ToProvider_Ack
	Details              isUpdate_ToProvider_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Update_ToProvider) Reset()         { *m = Update_ToProvider{} }
func (m *Update_ToProvider) String() string { return proto.CompactTextString(m) }
func (*Update_ToProvider) ProtoMessage()    {}
func (*Update_ToProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_42f4f365628b62e0, []int{0, 1}
}

func (m *Update_ToProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Update_ToProvider.Unmarshal(m, b)
}
func (m *Update_ToProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Update_ToProvider.Marshal(b, m, deterministic)
}
func (m *Update_ToProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update_ToProvider.Merge(m, src)
}
func (m *Update_ToProvider) XXX_Size() int {
	return xxx_messageInfo_Update_ToProvider.Size(m)
}
func (m *Update_ToProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_Update_ToProvider.DiscardUnknown(m)
}

var xxx_messageInfo_Update_ToProvider proto.InternalMessageInfo

type isUpdate_ToProvider_Details interface {
	isUpdate_ToProvider_Details()
}

type Update_ToProvider_Status struct {
	Status *system.Status `protobuf:"bytes,1,opt,name=status,proto3,oneof"`
}

type Update_ToProvider_Ack struct {
	Ack *system.Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*Update_ToProvider_Status) isUpdate_ToProvider_Details() {}

func (*Update_ToProvider_Ack) isUpdate_ToProvider_Details() {}

func (m *Update_ToProvider) GetDetails() isUpdate_ToProvider_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Update_ToProvider) GetStatus() *system.Status {
	if x, ok := m.GetDetails().(*Update_ToProvider_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Update_ToProvider) GetAck() *system.Ack {
	if x, ok := m.GetDetails().(*Update_ToProvider_Ack); ok {
		return x.Ack
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Update_ToProvider) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Update_ToProvider_Status)(nil),
		(*Update_ToProvider_Ack)(nil),
	}
}

func init() {
	proto.RegisterType((*Update)(nil), "telemetry.Update")
	proto.RegisterType((*Update_FromProvider)(nil), "telemetry.Update.FromProvider")
	proto.RegisterType((*Update_ToProvider)(nil), "telemetry.Update.ToProvider")
}

func init() { proto.RegisterFile("telemetry/collector.proto", fileDescriptor_42f4f365628b62e0) }

var fileDescriptor_42f4f365628b62e0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x14, 0xc4, 0x1b, 0x85, 0x48, 0xb7, 0xe2, 0x9f, 0x08, 0x52, 0x83, 0xa8, 0x78, 0x0a, 0x88, 0xbb,
	0x52, 0x3f, 0x81, 0x2d, 0x48, 0x8f, 0x92, 0xea, 0xc5, 0x93, 0x9b, 0xcd, 0xb3, 0x86, 0xfc, 0x79,
	0xe1, 0xed, 0xab, 0xd0, 0x2f, 0xeb, 0x67, 0x91, 0x66, 0xd3, 0x34, 0xe0, 0xcd, 0xeb, 0xfc, 0x86,
	0x99, 0x61, 0xc4, 0x05, 0x43, 0x01, 0x25, 0x30, 0xad, 0x95, 0xc1, 0xa2, 0x00, 0xc3, 0x48, 0xb2,
	0x26, 0x64, 0x0c, 0x86, 0x1d, 0x0a, 0xcf, 0xec, 0xda, 0x32, 0x94, 0xca, 0xb2, 0xe6, 0x95, 0x75,
	0x3c, 0x3c, 0x69, 0x45, 0x6d, 0xf2, 0x56, 0x39, 0xdf, 0x85, 0x11, 0xd4, 0x48, 0xec, 0xf4, 0xdb,
	0x1f, 0x4f, 0xf8, 0x6f, 0x75, 0xaa, 0x19, 0xc2, 0x5a, 0x1c, 0x3e, 0x13, 0x96, 0x2f, 0x84, 0xdf,
	0x59, 0x0a, 0x14, 0x44, 0xc2, 0x77, 0xa1, 0x63, 0xef, 0xc6, 0x8b, 0x46, 0x93, 0x23, 0xe9, 0x52,
	0xe5, 0xa2, 0x51, 0xe7, 0x83, 0xb8, 0xe5, 0xc1, 0x9d, 0xf0, 0x5d, 0xe8, 0x78, 0xaf, 0x71, 0x9e,
	0xca, 0xae, 0x4d, 0xc6, 0x0d, 0xd8, 0x98, 0x9d, 0x65, 0x3a, 0x14, 0x07, 0x29, 0xb0, 0xce, 0x0a,
	0x1b, 0x26, 0x42, 0xbc, 0xe2, 0x3f, 0xfa, 0xae, 0xc5, 0xbe, 0x36, 0x79, 0x5b, 0x36, 0xda, 0xda,
	0x9e, 0x4c, 0x3e, 0x1f, 0xc4, 0x1b, 0xd2, 0xeb, 0x98, 0x7c, 0x88, 0xe1, 0x6c, 0xfb, 0x5e, 0xb0,
	0x10, 0xc7, 0x33, 0xac, 0x2a, 0x30, 0xdc, 0xb5, 0x5e, 0xf5, 0xb6, 0xba, 0x23, 0x64, 0xff, 0x85,
	0xf0, 0xf2, 0x2f, 0xdf, 0x6d, 0x8e, 0xbc, 0x07, 0x6f, 0xaa, 0xde, 0xef, 0x97, 0x19, 0x7f, 0xad,
	0x12, 0x69, 0xb0, 0x54, 0x3a, 0xa3, 0x52, 0xd7, 0x2a, 0xab, 0x18, 0xe8, 0x53, 0x1b, 0xb0, 0xca,
	0x92, 0x51, 0x4b, 0x54, 0x5d, 0x4c, 0xe2, 0x37, 0xd7, 0x3f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0x8e, 0x4d, 0x74, 0xe1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CollectorClient is the client API for Collector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CollectorClient interface {
	// ConnectProvider connects a stream of updates from a  provider to a collector
	ConnectProvider(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectProviderClient, error)
}

type collectorClient struct {
	cc *grpc.ClientConn
}

func NewCollectorClient(cc *grpc.ClientConn) CollectorClient {
	return &collectorClient{cc}
}

func (c *collectorClient) ConnectProvider(ctx context.Context, opts ...grpc.CallOption) (Collector_ConnectProviderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Collector_serviceDesc.Streams[0], "/telemetry.Collector/ConnectProvider", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorConnectProviderClient{stream}
	return x, nil
}

type Collector_ConnectProviderClient interface {
	Send(*Update_FromProvider) error
	Recv() (*Update_ToProvider, error)
	grpc.ClientStream
}

type collectorConnectProviderClient struct {
	grpc.ClientStream
}

func (x *collectorConnectProviderClient) Send(m *Update_FromProvider) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorConnectProviderClient) Recv() (*Update_ToProvider, error) {
	m := new(Update_ToProvider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CollectorServer is the server API for Collector service.
type CollectorServer interface {
	// ConnectProvider connects a stream of updates from a  provider to a collector
	ConnectProvider(Collector_ConnectProviderServer) error
}

// UnimplementedCollectorServer can be embedded to have forward compatible implementations.
type UnimplementedCollectorServer struct {
}

func (*UnimplementedCollectorServer) ConnectProvider(srv Collector_ConnectProviderServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectProvider not implemented")
}

func RegisterCollectorServer(s *grpc.Server, srv CollectorServer) {
	s.RegisterService(&_Collector_serviceDesc, srv)
}

func _Collector_ConnectProvider_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServer).ConnectProvider(&collectorConnectProviderServer{stream})
}

type Collector_ConnectProviderServer interface {
	Send(*Update_ToProvider) error
	Recv() (*Update_FromProvider, error)
	grpc.ServerStream
}

type collectorConnectProviderServer struct {
	grpc.ServerStream
}

func (x *collectorConnectProviderServer) Send(m *Update_ToProvider) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorConnectProviderServer) Recv() (*Update_FromProvider, error) {
	m := new(Update_FromProvider)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Collector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Collector",
	HandlerType: (*CollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectProvider",
			Handler:       _Collector_ConnectProvider_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "telemetry/collector.proto",
}
