// Code generated by protoc-gen-go. DO NOT EDIT.
// source: telemetry/archive.proto

package telemetry

import (
	context "context"
	fmt "fmt"
	_ "github.com/airmap/interfaces/src/go"
	ids "github.com/airmap/interfaces/src/go/ids"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FlightQuery models input parameters for querying historial flight telemetry.
type FlightQuery struct {
	Flight               *ids.Flight          `protobuf:"bytes,1,opt,name=flight,proto3" json:"flight,omitempty"`
	Start                *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	SampleRate           *duration.Duration   `protobuf:"bytes,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FlightQuery) Reset()         { *m = FlightQuery{} }
func (m *FlightQuery) String() string { return proto.CompactTextString(m) }
func (*FlightQuery) ProtoMessage()    {}
func (*FlightQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_b397bcda53d493bb, []int{0}
}

func (m *FlightQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlightQuery.Unmarshal(m, b)
}
func (m *FlightQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlightQuery.Marshal(b, m, deterministic)
}
func (m *FlightQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlightQuery.Merge(m, src)
}
func (m *FlightQuery) XXX_Size() int {
	return xxx_messageInfo_FlightQuery.Size(m)
}
func (m *FlightQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FlightQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FlightQuery proto.InternalMessageInfo

func (m *FlightQuery) GetFlight() *ids.Flight {
	if m != nil {
		return m.Flight
	}
	return nil
}

func (m *FlightQuery) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *FlightQuery) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *FlightQuery) GetSampleRate() *duration.Duration {
	if m != nil {
		return m.SampleRate
	}
	return nil
}

func init() {
	proto.RegisterType((*FlightQuery)(nil), "telemetry.FlightQuery")
}

func init() { proto.RegisterFile("telemetry/archive.proto", fileDescriptor_b397bcda53d493bb) }

var fileDescriptor_b397bcda53d493bb = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0x95, 0xb6, 0x7f, 0x7f, 0x70, 0x84, 0x04, 0x1e, 0x4a, 0xc8, 0x00, 0x08, 0x16, 0x16,
	0x6c, 0x54, 0x24, 0xf6, 0x56, 0xa8, 0x13, 0x0b, 0x11, 0x13, 0x0b, 0x72, 0x93, 0xdb, 0xd4, 0x52,
	0x12, 0x47, 0xd7, 0x37, 0x88, 0x6e, 0xcc, 0xbc, 0x0f, 0x3c, 0x12, 0xcf, 0x81, 0x6a, 0xa7, 0xa1,
	0x82, 0x85, 0xd1, 0xe7, 0x7c, 0xc7, 0x3a, 0xf7, 0xb0, 0x43, 0x82, 0x02, 0x4a, 0x20, 0x5c, 0x49,
	0x85, 0xe9, 0x52, 0x3f, 0x83, 0xa8, 0xd1, 0x90, 0xe1, 0xbb, 0x9d, 0x11, 0x9f, 0xe4, 0xc6, 0xe4,
	0x05, 0x48, 0x67, 0xcc, 0x9b, 0x85, 0x24, 0x5d, 0x82, 0x25, 0x55, 0xd6, 0x9e, 0x8d, 0x8f, 0x7f,
	0x02, 0x59, 0x83, 0x8a, 0xb4, 0xa9, 0x5a, 0x7f, 0x1f, 0x5e, 0x08, 0x2a, 0xab, 0x4d, 0x65, 0x5b,
	0x65, 0x4f, 0x67, 0x56, 0xea, 0x6c, 0xf3, 0x1c, 0x7d, 0xb7, 0x40, 0xa8, 0x0d, 0x92, 0xd7, 0xcf,
	0x3e, 0x03, 0x16, 0xce, 0x0a, 0x9d, 0x2f, 0xe9, 0xbe, 0x01, 0x5c, 0xf1, 0x73, 0x36, 0x5c, 0xb8,
	0x67, 0x14, 0x9c, 0x06, 0x17, 0xe1, 0x38, 0x14, 0xeb, 0x3f, 0x3c, 0x91, 0xb4, 0x16, 0xbf, 0x61,
	0xff, 0x2c, 0x29, 0xa4, 0xa8, 0xe7, 0x98, 0x58, 0xf8, 0x76, 0x62, 0xd3, 0x4e, 0x3c, 0x6c, 0xea,
	0x4f, 0x07, 0xaf, 0xef, 0x51, 0x90, 0x78, 0x9c, 0x8f, 0x59, 0x1f, 0xaa, 0x2c, 0xea, 0xff, 0x31,
	0xb5, 0x86, 0xf9, 0x8c, 0x85, 0x56, 0x95, 0x75, 0x01, 0x4f, 0xa8, 0x08, 0xa2, 0x81, 0xcb, 0x1e,
	0xfd, 0xca, 0xde, 0xb6, 0x7b, 0x4c, 0xd9, 0x3a, 0xfa, 0xf6, 0x11, 0xf5, 0x76, 0x82, 0x84, 0xf9,
	0x64, 0xa2, 0x08, 0xc6, 0x77, 0xec, 0xff, 0xc4, 0xcf, 0xcf, 0x27, 0x8c, 0xbb, 0x63, 0xdb, 0xab,
	0xdc, 0x1c, 0x96, 0x8f, 0x44, 0x37, 0x91, 0xd8, 0x5a, 0x24, 0x3e, 0xd8, 0xd2, 0x3d, 0x7b, 0x15,
	0x4c, 0xe5, 0xe3, 0x65, 0xae, 0x69, 0xd9, 0xcc, 0x45, 0x6a, 0x4a, 0xa9, 0x34, 0x96, 0xaa, 0x96,
	0xba, 0x22, 0xc0, 0x85, 0x4a, 0xc1, 0x4a, 0x8b, 0xa9, 0xcc, 0x8d, 0xec, 0x92, 0xf3, 0xa1, 0x6b,
	0x7a, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xce, 0x0d, 0x1e, 0x0e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArchiveClient is the client API for Archive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveClient interface {
	QueryFlightReports(ctx context.Context, in *FlightQuery, opts ...grpc.CallOption) (Archive_QueryFlightReportsClient, error)
}

type archiveClient struct {
	cc *grpc.ClientConn
}

func NewArchiveClient(cc *grpc.ClientConn) ArchiveClient {
	return &archiveClient{cc}
}

func (c *archiveClient) QueryFlightReports(ctx context.Context, in *FlightQuery, opts ...grpc.CallOption) (Archive_QueryFlightReportsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Archive_serviceDesc.Streams[0], "/telemetry.Archive/QueryFlightReports", opts...)
	if err != nil {
		return nil, err
	}
	x := &archiveQueryFlightReportsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Archive_QueryFlightReportsClient interface {
	Recv() (*Report, error)
	grpc.ClientStream
}

type archiveQueryFlightReportsClient struct {
	grpc.ClientStream
}

func (x *archiveQueryFlightReportsClient) Recv() (*Report, error) {
	m := new(Report)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArchiveServer is the server API for Archive service.
type ArchiveServer interface {
	QueryFlightReports(*FlightQuery, Archive_QueryFlightReportsServer) error
}

func RegisterArchiveServer(s *grpc.Server, srv ArchiveServer) {
	s.RegisterService(&_Archive_serviceDesc, srv)
}

func _Archive_QueryFlightReports_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FlightQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArchiveServer).QueryFlightReports(m, &archiveQueryFlightReportsServer{stream})
}

type Archive_QueryFlightReportsServer interface {
	Send(*Report) error
	grpc.ServerStream
}

type archiveQueryFlightReportsServer struct {
	grpc.ServerStream
}

func (x *archiveQueryFlightReportsServer) Send(m *Report) error {
	return x.ServerStream.SendMsg(m)
}

var _Archive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.Archive",
	HandlerType: (*ArchiveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryFlightReports",
			Handler:       _Archive_QueryFlightReports_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry/archive.proto",
}
