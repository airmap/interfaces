# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from telemetry import archive_pb2 as telemetry_dot_archive__pb2
from telemetry import report_pb2 as telemetry_dot_report__pb2


class ArchiveStub(object):
  """Archive enables services for querying historical telematic data.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.QueryOperationReports = channel.unary_stream(
        '/telemetry.Archive/QueryOperationReports',
        request_serializer=telemetry_dot_archive__pb2.OperationQuery.SerializeToString,
        response_deserializer=telemetry_dot_report__pb2.Report.FromString,
        )


class ArchiveServicer(object):
  """Archive enables services for querying historical telematic data.
  """

  def QueryOperationReports(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ArchiveServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'QueryOperationReports': grpc.unary_stream_rpc_method_handler(
          servicer.QueryOperationReports,
          request_deserializer=telemetry_dot_archive__pb2.OperationQuery.FromString,
          response_serializer=telemetry_dot_report__pb2.Report.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'telemetry.Archive', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
