# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from telemetry import collector_pb2 as telemetry_dot_collector__pb2


class CollectorStub(object):
  """Collector exposes services that enable the reporting of telematic data.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ConnectProvider = channel.stream_stream(
        '/telemetry.Collector/ConnectProvider',
        request_serializer=telemetry_dot_collector__pb2.Update.FromProvider.SerializeToString,
        response_deserializer=telemetry_dot_collector__pb2.Update.ToProvider.FromString,
        )


class CollectorServicer(object):
  """Collector exposes services that enable the reporting of telematic data.
  """

  def ConnectProvider(self, request_iterator, context):
    """ConnectProvider connects a stream of updates from a  provider to a collector
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CollectorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ConnectProvider': grpc.stream_stream_rpc_method_handler(
          servicer.ConnectProvider,
          request_deserializer=telemetry_dot_collector__pb2.Update.FromProvider.FromString,
          response_serializer=telemetry_dot_collector__pb2.Update.ToProvider.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'telemetry.Collector', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
