// Copyright 2018 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "extensions.proto";
import "units.proto";

package airmap;

// Position models a spatial location.
message Position {
  Coordinate2D coordinate = 1;  // The lat/lng coordinate of the position
  Altitude altitude       = 2;  // The altitude component of the position.
}

// Coordinate2D models a WGS84 latitude and longitude.
message Coordinate2D {
  Degrees latitude    = 1 [(min_degrees).value = -90., (max_degrees).value = 90.];    // The latitude component of this coordinate.
  Degrees longitude   = 2 [(min_degrees).value = -180., (max_degrees).value = 180.];  // The longitude component of this coordinate.
  Error error         = 1001 [(nullable) = true];  // The error of the coordinate measurement.

  // Error models the inherent error in a coordinate measurement.
  message Error {
    Degrees latitude  = 1 [(min_degrees).value = 0.];  // The error estimate on the latitude measurement.
    Degrees longitude = 2 [(min_degrees).value = 0.];  // The error estimate on the longitude measurement.
  }    
}

// Altitude models a height measurement from a given datum/reference.
message Altitude {
  // Reference enumerates all known reference/datum systems for altitude measurements.
  enum Reference {
    UNKNOWN      = 0;  // An unknown reference.
    ELLIPSOID    = 1;  // References the hypothetical equipotential gravitational surface.
    GEOID        = 2;  // References and approximates the mean sea level.
    SURFACE      = 3;  // References the physical surface beneath the measurement.
    EXTERNAL     = 4;  // References an external measurement or estimate.
    BAROMETRIC   = 5;  // References a standard barometric pressure altitude. 1013.25 / 29.92
  }
  Meters height        = 1;  // The altitude as measured from the reference.
  Reference reference  = 2;  // The reference from which the altitude was measured.
  Error error          = 1001 [(nullable) = true]; // The error of the altitude measurement.

  // Error models the inherent error in the altitude measurement.
  message Error {
    Meters height = 1 [(min_meters).value = 0.];  // The altitude error estimate.
  }  
}

// Course models a course measurement.
message Course {
  Degrees angle  = 1 [(min_degrees).value = 0., (max_degrees).value = 360.];  // The angle of the course relative to true north.
  Error error    = 1001 [(nullable) = true];  // The error of the course measurement.

  // Error models the inherent error in the velocity measurement.
  message Error {
    Degrees degrees = 1 [(min_degrees).value = 0.];  // The error in course.
  }  
}

// Velocity models a velocity as XYZ vectors in the NED (north-east-down) coordinate space.
// To convert from ENU (east-north-up), set X, Y, Z from N, E, -U values respectively.
message Velocity {
  MetersPerSecond x = 1;  // The velocity along the X axis.
  MetersPerSecond y = 2;  // The velocity along the Y axis.
  MetersPerSecond z = 3;  // The velocity along the Z axis. 
  Error error       = 1001 [(nullable) = true]; // The error of the velocity measurement.

  // Error models the inherent error in the velocity measurement.
  message Error {
    MetersPerSecond x = 1 [(min_meters_per_second).value = 0.];  // The error along the X axis.
    MetersPerSecond y = 2 [(min_meters_per_second).value = 0.];  // The error along the Y axis.
    MetersPerSecond z = 3 [(min_meters_per_second).value = 0.];  // The error along the Z axis.
  }
}

// Orientation models an attitude or positional orientation measurement.
message Orientation {
  Degrees yaw   = 1;                         // The angular rotation of the vehicle along its vertical axis relative to True North.
  Degrees pitch = 2;                         // The angular rotation of the vehicle along its lateral axis.
  Degrees roll  = 3;                         // The angular rotation of the vehicle along its longitudinal axis.
  Error error   = 1001 [(nullable) = true];  // The error of the orientation measurements.
 
  // Error models the inherent error in the orientation measurement.
  message Error {
    Degrees yaw   = 1 [(min_degrees).value = 0.];  // The error in angular rotation of the vehicle along its vertical axis relative to True North.
    Degrees pitch = 2 [(min_degrees).value = 0.];  // The error in angular rotation of the vehicle along its lateral axis.
    Degrees roll  = 3 [(min_degrees).value = 0.];  // The error in angular rotation of the vehicle along its longitudinal axis.
  }
}

// Pressure models an atmospheric pressure measurement.
message Pressure {
  Pascal units  = 1;                         // The pressure in Pa units.
  Error error   = 1001 [(nullable) = true];  // The error in the pressure measurement.

  // Error models the inherent error in an atmospheric pressure measurement.
  message Error {
    Pascal pressure  = 1 [(min_degrees).value = 0.];  // The error in the pressure value.
  } 
}

// Temperature models an atmospheric temperature measurement.
message Temperature {
  Celsius degrees  = 1;                         // The temperature in degrees Celsius.
  Error error      = 1001 [(nullable) = true];  // The error in the temperature measurement.

  // Error models the inherent error in a temperature measurement.
  message Error {
    Celsius degrees  = 1 [(min_celsius).value = 0.];  // The error in the temperature value.
  } 
}
