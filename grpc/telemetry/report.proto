// Copyright 2018-2020 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "extensions.proto";
import "units/units.proto";
import "measurements/measurements.proto";
import "tracking/identity.proto";

package telemetry;

option go_package = "github.com/airmap/interfaces/src/go/telemetry";

// Report models a telemetry report at a given point in time.
message Report {
  google.protobuf.Timestamp observed    = 1;  // Time the report was observed; time of applicability.
  repeated tracking.Identity identities = 2;  // Identities associated with the report.

  // details is a discriminated union of all report types.
  oneof details {
    Spatial spatial       = 3;
    Vehicle vehicle       = 4;
    Atmosphere atmosphere = 5;
  }

  // Spatial models a spatial report
  message Spatial {
    measurements.Position position         = 1;  // A positional measurement. Required.
    measurements.Velocity velocity         = 2 [(grpc.nullable) = true];  // A velocity measurement.
    measurements.Orientation orientation   = 3 [(grpc.nullable) = true];  // An orientation/attitude measurement.
    measurements.Acceleration acceleration = 4 [(grpc.nullable) = true];  // An acceleration measurement.
  }

  // Vehicle models a vehicle report
  message Vehicle {
    repeated System systems            = 1;  // Detailed reports for vehicle systems.
    Endurance endurance                = 2 [(grpc.nullable) = true];  // The remaining endurance.
    google.protobuf.BoolValue airborne = 3 [(grpc.nullable) = true];  // A flag to indicate the vehicle is airborne.

    // System models a discrete vehicle system.
    message System {
      oneof details {
        Electrical electrical       = 1;
        Communication communication = 2;
        Propulsion propulsion       = 3;
        Safety safety               = 4;
      }

      // Electrical models the electrical system.
      message Electrical {
        repeated Bus buses         = 1 [(grpc.nullable) = true];
        repeated Battery batteries = 2 [(grpc.nullable) = true];

        // Bus models an electrical bus.
        message Bus {
          uint32 number         = 1 [(grpc.nullable) = true];  // The numeric identifier for the bus [0..n].
          units.Volts voltage   = 2 [(grpc.nullable) = true];  // The present voltage level in volts [V].
          units.Amperes current = 3 [(grpc.nullable) = true];  // The present load on the bus in amps. Positive values indicate a charge.
        }

        // Battery models a battery.
        message Battery {
          uint32 number              = 1 [(grpc.nullable) = true];  // The numeric identifier for the battery [0..n].
          units.Celsius temperature  = 2 [(grpc.nullable) = true];  // Temperature of battery in degrees Celsius[ºC].
          units.Volts voltage        = 3 [(grpc.nullable) = true];  // The present voltage of the battery in volts[V].
          units.Amperes current      = 4 [(grpc.nullable) = true];  // The present load on the battery in amps. Positive values indicate a charge.
          units.AmpereHours capacity = 5 [(grpc.nullable) = true];  // Total amount of battery capacity in ampere-hours[Ah].
          units.Percent charge       = 6 [(grpc.nullable) = true];  // The remaining battery capacity as a % of capacity.
        }
      }

      // Propulsion models the propulsion system.
      message Propulsion {
        repeated Motor motors = 1;

        message Motor {
          uint32 number             = 1;  // The numeric identifier for the motor [0..n].
          units.Volts voltage       = 2 [(grpc.nullable) = true];  // The voltage of the motor in volts [V].
          units.Amperes current     = 3 [(grpc.nullable) = true];  // The current of the motor in Amps [A].
          units.Celsius temperature = 4 [(grpc.nullable) = true];  // The temperature of the motor in degrees[ºC].
          units.RPM rpm             = 5 [(grpc.nullable) = true];  // The revolutions per minute (rpm) of the motor.
        }
      }

      // Communication models the communication system.
      message Communication {
        repeated Link links = 1;

        // Link models a communication link.
        message Link {
          oneof details {
            GPS gps           = 1;  // A GPS communication link.
            WiFi wifi         = 2;  // A Wi-Fi communication link.
            Cellular cellular = 3;  // A cellular communication link.
          }

          // WiFi models a Wi-Fi link.
          message WiFi {
            uint32 number  = 1 [(grpc.nullable) = true];  // The numeric identifier for the link [0..n].
            string ssid    = 2 [(grpc.nullable) = true];  // The network name.
            uint32 channel = 3 [(grpc.nullable) = true];  // The frequency channel.
            Band band      = 4 [(grpc.nullable) = true];  // The frequency band.
          }

          // GPS models a Global Positioning System link.
          message GPS {
            uint32 number     = 1 [(grpc.nullable) = true];  // The numeric identifier for the link [0..n].
            uint32 satellites = 2 [(grpc.nullable) = true];  // Number of satellites in range.
          }

          // Cellular models a cellular telecom link.
          message Cellular {
            uint32 number         = 1 [(grpc.nullable) = true];  // The numeric identifier for the link [0..n].
            units.Decibels signal = 2 [(grpc.nullable) = true];  // The signal level for the link in decibels [dB].
          }
        }

        // Band marks a radio frequency band.
        enum Band {
          BAND_UNKNOWN  = 0;
          BAND_2DOT4GHZ = 1;  // 2.4 GHz
          BAND_5DOT0GHZ = 2;  // 5.0 GHz
        }
      }

      // Safety models the safety system.
      message Safety {
        google.protobuf.BoolValue loss_of_link = 1 [(grpc.nullable) = true];  // Indicates the link to the aircraft has been lost.
      }
    }

    // Endurance models the run endurance of a vehicle.
    message Endurance {
      google.protobuf.Duration duration = 1 [(grpc.nullable) = true];  // The estimated remaining endurance expressed as duration.
      units.Meters distance             = 2 [(grpc.nullable) = true];  // The estimated remaining endurance expressed as distance.
    }
  }

  // Atmosphere models an atmospheric report
  message Atmosphere {
    measurements.Position position = 1;  // The position of the report.
    units.Pascals pressure         = 2 [(grpc.nullable) = true];  // An atmospheric pressure measurement [Pa].
    units.Celsius temperature      = 3 [(grpc.nullable) = true];  // A temperature measurement [ºC].
    units.MetersPerSecond wind     = 4 [(grpc.nullable) = true];  // A wind measurement [m/s].
  }
}
