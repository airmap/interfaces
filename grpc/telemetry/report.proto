// Copyright 2018-2019 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "extensions.proto";
import "measurements/measurements.proto";
import "tracking/identity.proto";

package telemetry;

option go_package = "github.com/airmap/interfaces/src/go/telemetry";

// Report models a measurement at a given point in time.
message Report {
  google.protobuf.Timestamp observed    = 1;  // The timestamp of the report.
  repeated tracking.Identity identities = 2;
  // details is a discriminated union of all measurement types.
  oneof details {
    Spatial spatial          = 3;
    Atmospheric atmospheric  = 4;
    System system            = 5;
  }

  // Spatial bundles geospatial measurements.
  message Spatial {
    measurements.Position position         = 1;  // A positional measurement.
    measurements.Velocity velocity         = 2  [(grpc.nullable) = true];  // A velocity measurement.
    measurements.Orientation orientation   = 3  [(grpc.nullable) = true];  // An orientation/attitude measurement.
    measurements.Acceleration acceleration = 4  [(grpc.nullable) = true];  // An acceloration measurement.
  }

  // Atmospheric bundles atmospheric measurements at a given position.
  message Atmospheric {
    measurements.Position position        = 1;  // The position for the atmospheric measurement.
    measurements.Pressure pressure        = 2;  // An atmospheric pressure measurement.
    measurements.Temperature temperature  = 3;  // A temperature measurement.
    measurements.Wind wind                = 4;  // A wind measurement.
  }

  message System {
    google.protobuf.Duration endurance = 1;  // The endurance remaining of the battery level.
    repeated Subsystem subsystems      = 2;  // A collection of system performances. 
    
    message Subsystem {
      oneof details {
        Battery battery = 1;  // Subsystem details about aircraft bettery.
      }

      message Battery {
        string id                            = 1;  // The identification number of the battery.
        double voltage                       = 2;  // The current voltage of the battery.
        CellVoltageLevel call_voltage_level  = 3;  // The current cell voltage level of the battery.
        measurements.Temperature temperature = 4;  // Temperature of battery.
        double capacity                      = 5;  // Total amount of battery capacity, in mAh (milliamp hours).
        double charge_percentage             = 6;  // The percentage of battery energy remaining with range [0, 100].
        
        enum CellVoltageLevel {
          UNKNOWN  = 0;  // Cell voltage is unknown.
          LEVEL0   = 1;  // Cell voltage is at a safe level.
          LEVEL1   = 2;  // Cell voltage level equal to or lower than threshold Level 1.
          LEVEL2   = 3;  // Cell voltage level equal to or lower than threshold Level 2.
          LEVEL3   = 4;  // Cell voltage level equal to or lower than threshold Level 3. Aircraft will start landing.
        }
      }
    }
  }
}