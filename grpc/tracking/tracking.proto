// Copyright 2018-2020 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "google/protobuf/duration.proto";

import "extensions.proto";
import "system/status.proto";
import "system/ack.proto";
import "tracking/identity.proto";
import "tracking/track.proto";

package tracking;

option go_package = "github.com/airmap/interfaces/src/go/tracking";

// Collector service enables the exchange of surveillance updates with a collector service.
service Collector {
  // ConnectProvider connects a stream of updates from a provider to a collector.
  rpc ConnectProvider(stream Update.FromProvider) returns (stream Update.ToProvider);
  // ConnectProcessor connects a stream of updates from a collector to a processor.
  rpc ConnectProcessor(stream Update.FromProcessor) returns (stream Update.ToProcessor);
}

// ConnectProviderParameters models configuration parameters for provider streams.
message ConnectProviderParameters {
  // The ID of the provider.
  Identity.ProviderId id = 1;
  // The expected duration between updates. Used for monitoring and alerting
  // purposes. If null, the pipeline chooses a default value or tries to
  // determine a reasonable value based on historic data.
  google.protobuf.Duration expected_duration_between_updates = 2 [(grpc.nullable) = true];
}

// ConnectProcessorParameters models configuration parameters for processor streams
message ConnectProcessorParameters {
  bool enable_projection = 1;  // Tracks will be forward-projected at a constant rate.
}

// Update bundles types used in the exchange of tracks.
message Update {
  // FromProvider wraps messages being sent by a provider to a traffic collector.
  message FromProvider {
    oneof details {
      system.Status status             = 1;  // Provider operational status.
      Track.Batch batch                = 2;  // Batch of updates from a track provider.
      ConnectProviderParameters params = 3;  // Parameters used to customize the stream from the provider.
    }
  }

  // ToProvider wraps messages being sent from a collector back to a provider.
  message ToProvider {
    oneof details {
      system.Status status = 1;  // Collector operational status.
      system.Ack ack       = 2;  // Acknowledgement of received updates.
      system.Nack nack     = 3;  // Negative acknowledgement of received updates.
    }
  }

  // ToProcessor wraps messages being sent by a collector to a processor.
  message ToProcessor {
    oneof details {
      system.Status status = 1;  // Collector operational status.
      Track.Batch batch    = 2;  // Batch of updates from a track collector.
    }
  }

  message FromProcessor {
    oneof details {
      system.Status status              = 1;  // Processor operational status.
      system.Ack ack                    = 2;  // Acknowledgement of received updates.
      ConnectProcessorParameters params = 3;  // Parameters used to customize the stream to the processor.
    }
  }
}
