// Copyright 2018-2020 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "extensions.proto";
import "ids/ids.proto";

package tracking;

option go_package = "github.com/airmap/interfaces/src/go/tracking";

// Identity models a unique tracking identity.
message Identity {
  // details is a discriminated union of all identity types.
  oneof details {
    ProviderId provider_id     = 1;
    TrackId track_id           = 2;
    Callsign callsign          = 3;
    Registration registration  = 4;
    Operation operation        = 5;
    Icao icao                  = 6;
    Manufacturer manufacturer  = 7;
    NetworkInterface network   = 8;
    IMEI imei                  = 9;
    IMSI imsi                  = 10;
    Tracker tracker            = 11;
  }

  // ProviderId models the unique identifier of a provider of tracks.
  message ProviderId {
    string as_string  = 1;
  }

  // Track models a unique identifier for a track assembled from multiple different observations.
  message TrackId {
    string as_string  = 1;
  }

  // Callsign models the callsign assigned to a vehicle.
  message Callsign {
    string as_string  = 1 [(grpc.format) = "%c%c%c%c%c%c%c%c"];
  }

  // Registration models the registration of an aircraft.
  message Registration {
    string as_string  = 1;
  }

  // Operation models an operation.
  message Operation {
    ids.Operation operation_id   = 1;  // The operation identifier.
    ids.USS service_provider_id  = 2;  // The UTM Service Supplier that issued the identifier.
  }

  // Icao bundles up information that describes an aircraft in the ICAO context.
  message Icao {
    Address24 address           = 1 [(grpc.nullable) = true];  // The ICAO-assigned address of an aircraft.
    AircraftType aircraft_type  = 2 [(grpc.nullable) = true];  // The ICAO-assigned type of an aircraft.

    // Address24 models the unique address of an aircraft assigned by ICAO.
    message Address24 {
      string as_string  = 1 [(grpc.format) = "%02X%02X%02X"];
    }

    // AircraftType models an ICAO-registered aircraft type.
    message AircraftType {
      string as_string  = 1;
    }
  }

  // Manufacturer identifies a make, model, and serial number of an aircraft or sensor.
  message Manufacturer {
    string make           = 1 [(grpc.nullable) = true];  // The name of the manufacturer.
    string model          = 2 [(grpc.nullable) = true];  // The name of the model.
    string serial_number  = 3 [(grpc.nullable) = true];  // The serial number.
  }

  // NetworkInterface identifies a vehicle by its network interfaces.
  message NetworkInterface {
    MACAddress mac_address  = 1;  // The hardware address of the network interface.

    // MACAddress models the hardware address of the network interface.
    message MACAddress {
      string as_string  = 1 [(grpc.format) = "%02X:%02X:%02X:%02X:%02X:%02X"];
    }
  }

  // IMEI models the International Mobile Equipment Identity.
  message IMEI {
    string as_string = 1 [(grpc.format) = "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"];
  }

  // IMSI models the International Mobile Subscriber Identity.
  message IMSI {
    string as_string = 1 [(grpc.format) = "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c"];
  }

  // Tracker models a tracker.
  message Tracker {
    ids.Tracker tracker_id = 1;  // The tracker identifier.
  }
}
