// Copyright 2018 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "extensions.proto";
import "measurements.proto";

package airmap;

// TrafficProvider expose a service that enables the exchange of traffic updates with a traffic service.
service TrafficProvider {
  // RegisterProvider registers a provider of traffic updates.
  rpc RegisterProvider(stream Traffic.Update.FromProvider) returns (stream Traffic.Update.ToProvider);
}

// Traffic bundles all types used in the exchange of traffic observations among traffic providers, collectors, and processors.
message Traffic {
  // Observation describes an individual observation of an (aerial) vehicle.
  message Observation {
    Sensor sensor                          = 1;                       // Describes the sensor(s) from which the observation originated.
    repeated Identity identities           = 2;                       // All known identities for the target.
    google.protobuf.Timestamp observed     = 3;                       // The time when the observation was observed.
    google.protobuf.Duration ttl           = 4 [(nullable) = true];   // Time-to-live for this track.
    Position position                      = 5;                       // Position of the vehicle.
    Course course                          = 6 [(nullable) = true];   // Course over ground relative to True North, 0-359.
    Velocity velocity                      = 7 [(nullable) = true];   // Velocity of the vehicle expressed as XYZ (NED) vectors.
    Orientation orientation                = 8 [(nullable) = true];   // Orientation of the vehicle expressed as yaw, pitch, roll.
    repeated google.protobuf.Any details   = 1024;                    // Vendor-specific details.
  }

  // Sensor models the device/method used to capture an observations.
  message Sensor {
    // details provides specific information for a given sensor.
    oneof details {
      Fused fused                    = 1;  // Marks multiple sensors fused together.
      PrimaryRadar primary_radar     = 2;  // Marks a primary radar sensor.
      SecondaryRadar secondary_radar = 3;  // Marks a secondary radar sensor.
      Adsb adsb                      = 4;  // Marks an ADS-B sensor.
      RadioFrequency radio_frequency = 5;  // Marks a Radio Frequency (RF) sensor.
    }
    
    // Fused models multiple fused data sensors.
    message Fused {
      repeated Sensor sensors = 1;
    }

    // PrimaryRadar models a primary radar sensor.
    message PrimaryRadar {
      // Reserved for future extensibility
    }

    // SecondaryRadar models a secondary radar sensor.
    message SecondaryRadar {
      // Reserved for future extensibility
    }

    // Adsb models an ADS-B sensor.
    message Adsb {
      // Reserved for future extensibility
    }

    // RadioFrequency models a Radio Frequency (RF) sensor.
    message RadioFrequency {
      // Reserved for future extensibility
    }
  }

  // Identity models a uniquely-identifying data point for a traffic sensor or traffic target.
  message Identity {
    // details is a discriminated union of all identity types.
    oneof details {
      ProviderId provider_id     = 1;
      TrackId track_id           = 2;
      Callsign callsign          = 3;
      Registration registration  = 4;
      Icao icao                  = 5;
      Manufacturer manufacturer  = 6;
      NetworkInterface network   = 7;
    }

    // ProviderId models the unique identifier of a provider of traffic observations.
    message ProviderId {
      string as_string  = 1;
    }

    // Track models a unique identifier for a track assembled from multiple different observations.
    message TrackId {
      string as_string  = 1;
    }

    // Callsign models the callsign assigned to a vehicle.
    message Callsign {
      string as_string  = 1 [(format) = "%c%c%c%c%c%c%c%c"];
    }

    // Registration models the registration of an aircraft.
    message Registration {
      string as_string  = 1;
    }

    // Icao bundles up information that describes an aircraft in the ICAO context.
    message Icao {
      Address24 address           = 1 [(nullable) = true];  // The ICAO-assigned address of an aircraft.
      AircraftType aircraft_type  = 2 [(nullable) = true];  // The ICAO-assigned type of an aircraft.

      // Address24 models the unique address of an aircraft assigned by ICAO.
      message Address24 {
        string as_string = 1 [(format) = "%02X%02X%02X"];
      }

      // AircraftType models an ICAO-registered aircraft type.
      message AircraftType {
        string as_string = 1;
      }
    }

    // Manufacturer identifies a make, model, and serial number of an aircraft or sensor.
    message Manufacturer {
      string make          = 1 [(nullable) = true];  // The name of the manufacturer.
      string model         = 2 [(nullable) = true];  // The name of the model.
      string serial_number = 3 [(nullable) = true];  // The serial number.
    }

    // NetworkInterface identifies a vehicle by its network interfaces.
    message NetworkInterface {
      MACAddress mac_address  = 1;  // The hardware address of the network interface.

      // MACAddress models the hardware address of the network interface.
      message MACAddress {
        string as_string = 1 [(format) = "%02X:%02X:%02X:%02X:%02X:%02X"];
      }
    }
  }

  // Update bundles types used in the exchange of traffic observations.
  message Update {
    // FromProvider models a batch of data observed by a traffic provider and sent to a traffic collector.
    message FromProvider {
      repeated Traffic.Observation observations  = 1;  // Observations as recorded by a provider.
      google.protobuf.Timestamp submitted        = 2;  // The time when the update was submitted by the provider.
      google.protobuf.Timestamp received         = 3  [(nullable) = true];  // The time when the update was received by the traffic collector.
    }

    // ToProvider models information communicated back to a traffic provider.
    message ToProvider {
      // Ack describes an acknowledgement of observations received from a traffic provider.
      message Ack {
        uint64 count                         = 1;  // Number of messages received.
        google.protobuf.Timestamp submitted  = 2;  // The time when the message was sent to a traffic provider.
      }
      Ack ack = 1;  // Ack for received update.
    }
  }
}
