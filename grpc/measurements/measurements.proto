// Copyright 2018-2020 AirMap, Inc.  All rights reserved.

syntax = "proto3";

import "extensions.proto";
import "units/units.proto";
import "units/units_ext.proto";
import "measurements/dop.proto";

package measurements;

option go_package = "github.com/airmap/interfaces/src/go/measurements";

// Position models a spatial location.
message Position {

  // Details is a descriminated union of all Position types
  oneof details {
    Absolute absolute  = 1;
    Relative relative  = 2;
  }

  // Absolute models an absolute position.
  message Absolute {
    Coordinate2D coordinate  = 1;  // The latitude and longitude component of the position.
    Altitude altitude        = 2;  // The altitude component of the position.
  }

  // Relative models a position relative to an absolute position.
  message Relative {
    Absolute reference     = 1;  // The reference position from which the relative measurement is anchored.
    units.Meters distance  = 2;  // The distance from the reference position.
    units.Degrees azimuth  = 3;  // The bearing from the reference position relative to true north.
    Error error            = 1001 [(grpc.nullable) = true];  // The error in the measurement.

    message Error {
      units.Meters distance  = 1 [(units.min_meters).value = 0.0, (grpc.nullable) = true];   // The error estimate on the distance measurement.
      units.Degrees azimuth  = 2 [(units.min_degrees).value = 0.0, (grpc.nullable) = true];  // The error estimate on the azimuth measurement.
    }
  }
}

// Coordinate2D models a WGS84 latitude and longitude.
message Coordinate2D {
  units.Degrees latitude   = 1 [(units.min_degrees).value = -90.0, (units.max_degrees).value = 90.0];    // The latitude component.
  units.Degrees longitude  = 2 [(units.min_degrees).value = -180.0, (units.max_degrees).value = 180.0];  // The longitude component.
  Error error              = 1001 [(grpc.nullable) = true];  // The error in the measurement.

  // Error models the inherent error in a coordinate measurement.
  message Error {
    units.Degrees latitude   = 1 [(units.min_degrees).value = 0.0, (grpc.nullable) = true];  // The error estimate on the latitude measurement.
    units.Degrees longitude  = 2 [(units.min_degrees).value = 0.0, (grpc.nullable) = true];  // The error estimate on the longitude measurement.
    DOP.Horizontal hdop      = 3 [(grpc.nullable) = true]; // The error expressed as the Horizontal Dilution of Precision (HDOP).
  }
}

// Altitude models a height measurement from a given datum/reference.
message Altitude {
  // Reference enumerates all known reference/datum systems for altitude measurements.
  enum Reference {
    REFERENCE_UNKNOWN        = 0;  // An unknown reference.
    REFERENCE_ELLIPSOID      = 1;  // Height above the WGS84 reference ellipsoid.
    REFERENCE_GEOID          = 2;  // Height above the hypothetical gravitational surface.
    REFERENCE_SURFACE        = 3 [deprecated=true];  // (DO NOT USE) Height above the physical surface beneath the measurement.
    REFERENCE_EXTERNAL       = 4 [deprecated=true];  // (DO NOT USE) Height above an external measurement or estimate.
    REFERENCE_STANDARD_BARO  = 5;  // Altitude using standard atmospheric pressure. 1013.25 hPa, 29.92 in Hg. Flight Level (FL).
    REFERENCE_LOCAL_BARO     = 6;  // Altitude relative to local sea level adjusted for local barometric pressure. AMSL.
  }
  units.Meters height  = 1;  // The altitude as measured from the reference.
  Reference reference  = 2;  // The reference from which the altitude was measured.
  Error error          = 1001 [(grpc.nullable) = true]; // The error in the measurement.

  // Error models the inherent error in the altitude measurement.
  message Error {
    units.Meters height  = 1 [(units.min_meters).value = 0.0, (grpc.nullable) = true];  // The altitude error estimate.
    DOP.Vertical vdop    = 2 [(grpc.nullable) = true];  // The error expressed as the Vertical Dilution of Precision (HDOP).
  }
}

// Velocity models a velocity measurement.
message Velocity {
  oneof details {
    Polar polar          = 1;
    Cartesian cartesian  = 2;
  }

  // Polar Velocity models a velocity relative to a heading.
  message Polar {
    units.Degrees heading                = 1 [(units.min_degrees).value = 0.0, (units.max_degrees).value = 360.0];  // The heading relative to true north.
    units.MetersPerSecond groundSpeed    = 2 [(units.min_meters_per_second).value = 0.0]; // The horizontal speed component relative to the ground.
    units.MetersPerSecond climbRate      = 3; // The vertical speed component.
    Error error                          = 1001 [(grpc.nullable) = true]; // The error of the measurement.

    // Error models the inherent error in the polar velocity measurement.
    message Error {
      units.Degrees heading              = 1 [(units.min_degrees).value = 0.0, (grpc.nullable) = true];  // The error in the heading.
      units.MetersPerSecond groundSpeed  = 2 [(units.min_meters_per_second).value = 0.0, (grpc.nullable) = true];  // The error in the ground speed.
      units.MetersPerSecond climbRate    = 3 [(units.min_meters_per_second).value = 0.0, (grpc.nullable) = true];  // The error in the vertical speed.
    }
  }

  // Cartesian Velocity models a velocity as XYZ vectors in the NED (north-east-down) coordinate space.
  // *To convert from ENU (east-north-up), set (X, Y, Z) to (N, E, negative-U) values respectively.
  message Cartesian {
    units.MetersPerSecond x  = 1;  // The velocity along the X axis.
    units.MetersPerSecond y  = 2;  // The velocity along the Y axis.
    units.MetersPerSecond z  = 3;  // The velocity along the Z axis.
    Error error              = 1001 [(grpc.nullable) = true]; // The error of the measurement.

    // Error models the inherent error in the cartesian velocity measurement.
    message Error {
      units.MetersPerSecond x  = 1 [(units.min_meters_per_second).value = 0.0, (grpc.nullable) = true];  // The error along the X axis.
      units.MetersPerSecond y  = 2 [(units.min_meters_per_second).value = 0.0, (grpc.nullable) = true];  // The error along the Y axis.
      units.MetersPerSecond z  = 3 [(units.min_meters_per_second).value = 0.0, (grpc.nullable) = true];  // The error along the Z axis.
    }
  }
}

// Orientation models an attitude or positional orientation measurement.
message Orientation {
  units.Degrees yaw    = 1;  // The angular rotation of the vehicle along its vertical axis relative to True North.
  units.Degrees pitch  = 2;  // The angular rotation of the vehicle along its lateral axis.
  units.Degrees roll   = 3;  // The angular rotation of the vehicle along its longitudinal axis.
  Error error          = 1001 [(grpc.nullable) = true];  // The error of the measurement.

  // Error models the inherent error in the orientation measurement.
  message Error {
    units.Degrees yaw    = 1 [(units.min_degrees).value = 0.0, (grpc.nullable) = true];  // The error in angular rotation of the vehicle along its vertical axis relative to True North.
    units.Degrees pitch  = 2 [(units.min_degrees).value = 0.0, (grpc.nullable) = true];  // The error in angular rotation of the vehicle along its lateral axis.
    units.Degrees roll   = 3 [(units.min_degrees).value = 0.0, (grpc.nullable) = true];  // The error in angular rotation of the vehicle along its longitudinal axis.
  }
}

// Acceleration models an acceleration measurement.
message Acceleration {
  units.MetersPerSecondSquared x  = 1;  // The acceleration along the X axis.
  units.MetersPerSecondSquared y  = 2;  // The acceleration along the Y axis.
  units.MetersPerSecondSquared z  = 3;  // The acceleration along the Z axis.
  Error error                     = 1001 [(grpc.nullable) = true];

  // Error models the inherent error in an acceleration measurement.
  message Error {
    units.MetersPerSecond x  = 1 [(units.min_meters_per_second_squared).value = 0.0, (grpc.nullable) = true];  // The error along the X axis.
    units.MetersPerSecond y  = 2 [(units.min_meters_per_second_squared).value = 0.0, (grpc.nullable) = true];  // The error along the Y axis.
    units.MetersPerSecond z  = 3 [(units.min_meters_per_second_squared).value = 0.0, (grpc.nullable) = true];  // The error along the Z axis.
  }
}
