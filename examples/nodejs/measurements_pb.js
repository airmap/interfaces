/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var extensions_pb = require('./extensions_pb.js');
var units_pb = require('./units_pb.js');
goog.exportSymbol('proto.airmap.Altitude', null, global);
goog.exportSymbol('proto.airmap.Altitude.Error', null, global);
goog.exportSymbol('proto.airmap.Altitude.Reference', null, global);
goog.exportSymbol('proto.airmap.Coordinate2D', null, global);
goog.exportSymbol('proto.airmap.Coordinate2D.Error', null, global);
goog.exportSymbol('proto.airmap.Course', null, global);
goog.exportSymbol('proto.airmap.Course.Error', null, global);
goog.exportSymbol('proto.airmap.Orientation', null, global);
goog.exportSymbol('proto.airmap.Orientation.Error', null, global);
goog.exportSymbol('proto.airmap.Position', null, global);
goog.exportSymbol('proto.airmap.Pressure', null, global);
goog.exportSymbol('proto.airmap.Pressure.Error', null, global);
goog.exportSymbol('proto.airmap.Temperature', null, global);
goog.exportSymbol('proto.airmap.Temperature.Error', null, global);
goog.exportSymbol('proto.airmap.Velocity', null, global);
goog.exportSymbol('proto.airmap.Velocity.Error', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Position.displayName = 'proto.airmap.Position';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    coordinate: (f = msg.getCoordinate()) && proto.airmap.Coordinate2D.toObject(includeInstance, f),
    altitude: (f = msg.getAltitude()) && proto.airmap.Altitude.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Position}
 */
proto.airmap.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Position;
  return proto.airmap.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Position}
 */
proto.airmap.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.airmap.Coordinate2D;
      reader.readMessage(value,proto.airmap.Coordinate2D.deserializeBinaryFromReader);
      msg.setCoordinate(value);
      break;
    case 2:
      var value = new proto.airmap.Altitude;
      reader.readMessage(value,proto.airmap.Altitude.deserializeBinaryFromReader);
      msg.setAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoordinate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.airmap.Coordinate2D.serializeBinaryToWriter
    );
  }
  f = message.getAltitude();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.airmap.Altitude.serializeBinaryToWriter
    );
  }
};


/**
 * optional Coordinate2D coordinate = 1;
 * @return {?proto.airmap.Coordinate2D}
 */
proto.airmap.Position.prototype.getCoordinate = function() {
  return /** @type{?proto.airmap.Coordinate2D} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Coordinate2D, 1));
};


/** @param {?proto.airmap.Coordinate2D|undefined} value */
proto.airmap.Position.prototype.setCoordinate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Position.prototype.clearCoordinate = function() {
  this.setCoordinate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Position.prototype.hasCoordinate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Altitude altitude = 2;
 * @return {?proto.airmap.Altitude}
 */
proto.airmap.Position.prototype.getAltitude = function() {
  return /** @type{?proto.airmap.Altitude} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Altitude, 2));
};


/** @param {?proto.airmap.Altitude|undefined} value */
proto.airmap.Position.prototype.setAltitude = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.airmap.Position.prototype.clearAltitude = function() {
  this.setAltitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Position.prototype.hasAltitude = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Coordinate2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.airmap.Coordinate2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Coordinate2D.displayName = 'proto.airmap.Coordinate2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Coordinate2D.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Coordinate2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Coordinate2D} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Coordinate2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = msg.getLatitude()) && units_pb.Degrees.toObject(includeInstance, f),
    longitude: (f = msg.getLongitude()) && units_pb.Degrees.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.airmap.Coordinate2D.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Coordinate2D}
 */
proto.airmap.Coordinate2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Coordinate2D;
  return proto.airmap.Coordinate2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Coordinate2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Coordinate2D}
 */
proto.airmap.Coordinate2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setLatitude(value);
      break;
    case 2:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setLongitude(value);
      break;
    case 1001:
      var value = new proto.airmap.Coordinate2D.Error;
      reader.readMessage(value,proto.airmap.Coordinate2D.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Coordinate2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Coordinate2D.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Coordinate2D} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Coordinate2D.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getLongitude();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.airmap.Coordinate2D.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Coordinate2D.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Coordinate2D.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Coordinate2D.Error.displayName = 'proto.airmap.Coordinate2D.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Coordinate2D.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Coordinate2D.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Coordinate2D.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Coordinate2D.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: (f = msg.getLatitude()) && units_pb.Degrees.toObject(includeInstance, f),
    longitude: (f = msg.getLongitude()) && units_pb.Degrees.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Coordinate2D.Error}
 */
proto.airmap.Coordinate2D.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Coordinate2D.Error;
  return proto.airmap.Coordinate2D.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Coordinate2D.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Coordinate2D.Error}
 */
proto.airmap.Coordinate2D.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setLatitude(value);
      break;
    case 2:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Coordinate2D.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Coordinate2D.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Coordinate2D.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Coordinate2D.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getLongitude();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
};


/**
 * optional Degrees latitude = 1;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Coordinate2D.Error.prototype.getLatitude = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 1));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Coordinate2D.Error.prototype.setLatitude = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Coordinate2D.Error.prototype.clearLatitude = function() {
  this.setLatitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Coordinate2D.Error.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Degrees longitude = 2;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Coordinate2D.Error.prototype.getLongitude = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 2));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Coordinate2D.Error.prototype.setLongitude = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.airmap.Coordinate2D.Error.prototype.clearLongitude = function() {
  this.setLongitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Coordinate2D.Error.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Degrees latitude = 1;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Coordinate2D.prototype.getLatitude = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 1));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Coordinate2D.prototype.setLatitude = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Coordinate2D.prototype.clearLatitude = function() {
  this.setLatitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Coordinate2D.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Degrees longitude = 2;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Coordinate2D.prototype.getLongitude = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 2));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Coordinate2D.prototype.setLongitude = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.airmap.Coordinate2D.prototype.clearLongitude = function() {
  this.setLongitude(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Coordinate2D.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Error error = 1001;
 * @return {?proto.airmap.Coordinate2D.Error}
 */
proto.airmap.Coordinate2D.prototype.getError = function() {
  return /** @type{?proto.airmap.Coordinate2D.Error} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Coordinate2D.Error, 1001));
};


/** @param {?proto.airmap.Coordinate2D.Error|undefined} value */
proto.airmap.Coordinate2D.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.airmap.Coordinate2D.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Coordinate2D.prototype.hasError = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Altitude = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.airmap.Altitude, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Altitude.displayName = 'proto.airmap.Altitude';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Altitude.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Altitude.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Altitude} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Altitude.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: (f = msg.getHeight()) && units_pb.Meters.toObject(includeInstance, f),
    reference: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: (f = msg.getError()) && proto.airmap.Altitude.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Altitude}
 */
proto.airmap.Altitude.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Altitude;
  return proto.airmap.Altitude.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Altitude} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Altitude}
 */
proto.airmap.Altitude.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Meters;
      reader.readMessage(value,units_pb.Meters.deserializeBinaryFromReader);
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!proto.airmap.Altitude.Reference} */ (reader.readEnum());
      msg.setReference(value);
      break;
    case 1001:
      var value = new proto.airmap.Altitude.Error;
      reader.readMessage(value,proto.airmap.Altitude.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Altitude.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Altitude.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Altitude} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Altitude.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Meters.serializeBinaryToWriter
    );
  }
  f = message.getReference();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.airmap.Altitude.Error.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.airmap.Altitude.Reference = {
  UNKNOWN: 0,
  ELLIPSOID: 1,
  GEOID: 2,
  SURFACE: 3,
  EXTERNAL: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Altitude.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Altitude.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Altitude.Error.displayName = 'proto.airmap.Altitude.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Altitude.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Altitude.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Altitude.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Altitude.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: (f = msg.getHeight()) && units_pb.Meters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Altitude.Error}
 */
proto.airmap.Altitude.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Altitude.Error;
  return proto.airmap.Altitude.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Altitude.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Altitude.Error}
 */
proto.airmap.Altitude.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Meters;
      reader.readMessage(value,units_pb.Meters.deserializeBinaryFromReader);
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Altitude.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Altitude.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Altitude.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Altitude.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Meters.serializeBinaryToWriter
    );
  }
};


/**
 * optional Meters height = 1;
 * @return {?proto.airmap.Meters}
 */
proto.airmap.Altitude.Error.prototype.getHeight = function() {
  return /** @type{?proto.airmap.Meters} */ (
    jspb.Message.getWrapperField(this, units_pb.Meters, 1));
};


/** @param {?proto.airmap.Meters|undefined} value */
proto.airmap.Altitude.Error.prototype.setHeight = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Altitude.Error.prototype.clearHeight = function() {
  this.setHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Altitude.Error.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Meters height = 1;
 * @return {?proto.airmap.Meters}
 */
proto.airmap.Altitude.prototype.getHeight = function() {
  return /** @type{?proto.airmap.Meters} */ (
    jspb.Message.getWrapperField(this, units_pb.Meters, 1));
};


/** @param {?proto.airmap.Meters|undefined} value */
proto.airmap.Altitude.prototype.setHeight = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Altitude.prototype.clearHeight = function() {
  this.setHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Altitude.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Reference reference = 2;
 * @return {!proto.airmap.Altitude.Reference}
 */
proto.airmap.Altitude.prototype.getReference = function() {
  return /** @type {!proto.airmap.Altitude.Reference} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.airmap.Altitude.Reference} value */
proto.airmap.Altitude.prototype.setReference = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Error error = 1001;
 * @return {?proto.airmap.Altitude.Error}
 */
proto.airmap.Altitude.prototype.getError = function() {
  return /** @type{?proto.airmap.Altitude.Error} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Altitude.Error, 1001));
};


/** @param {?proto.airmap.Altitude.Error|undefined} value */
proto.airmap.Altitude.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.airmap.Altitude.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Altitude.prototype.hasError = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Course = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.airmap.Course, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Course.displayName = 'proto.airmap.Course';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Course.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Course.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Course} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Course.toObject = function(includeInstance, msg) {
  var f, obj = {
    angle: (f = msg.getAngle()) && units_pb.Degrees.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.airmap.Course.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Course}
 */
proto.airmap.Course.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Course;
  return proto.airmap.Course.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Course} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Course}
 */
proto.airmap.Course.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setAngle(value);
      break;
    case 1001:
      var value = new proto.airmap.Course.Error;
      reader.readMessage(value,proto.airmap.Course.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Course.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Course.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Course} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Course.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAngle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.airmap.Course.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Course.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Course.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Course.Error.displayName = 'proto.airmap.Course.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Course.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Course.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Course.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Course.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    degrees: (f = msg.getDegrees()) && units_pb.Degrees.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Course.Error}
 */
proto.airmap.Course.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Course.Error;
  return proto.airmap.Course.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Course.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Course.Error}
 */
proto.airmap.Course.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setDegrees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Course.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Course.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Course.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Course.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDegrees();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
};


/**
 * optional Degrees degrees = 1;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Course.Error.prototype.getDegrees = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 1));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Course.Error.prototype.setDegrees = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Course.Error.prototype.clearDegrees = function() {
  this.setDegrees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Course.Error.prototype.hasDegrees = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Degrees angle = 1;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Course.prototype.getAngle = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 1));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Course.prototype.setAngle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Course.prototype.clearAngle = function() {
  this.setAngle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Course.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 1001;
 * @return {?proto.airmap.Course.Error}
 */
proto.airmap.Course.prototype.getError = function() {
  return /** @type{?proto.airmap.Course.Error} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Course.Error, 1001));
};


/** @param {?proto.airmap.Course.Error|undefined} value */
proto.airmap.Course.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.airmap.Course.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Course.prototype.hasError = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Velocity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.airmap.Velocity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Velocity.displayName = 'proto.airmap.Velocity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Velocity.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Velocity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Velocity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Velocity.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = msg.getX()) && units_pb.MetersPerSecond.toObject(includeInstance, f),
    y: (f = msg.getY()) && units_pb.MetersPerSecond.toObject(includeInstance, f),
    z: (f = msg.getZ()) && units_pb.MetersPerSecond.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.airmap.Velocity.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Velocity}
 */
proto.airmap.Velocity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Velocity;
  return proto.airmap.Velocity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Velocity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Velocity}
 */
proto.airmap.Velocity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.MetersPerSecond;
      reader.readMessage(value,units_pb.MetersPerSecond.deserializeBinaryFromReader);
      msg.setX(value);
      break;
    case 2:
      var value = new units_pb.MetersPerSecond;
      reader.readMessage(value,units_pb.MetersPerSecond.deserializeBinaryFromReader);
      msg.setY(value);
      break;
    case 3:
      var value = new units_pb.MetersPerSecond;
      reader.readMessage(value,units_pb.MetersPerSecond.deserializeBinaryFromReader);
      msg.setZ(value);
      break;
    case 1001:
      var value = new proto.airmap.Velocity.Error;
      reader.readMessage(value,proto.airmap.Velocity.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Velocity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Velocity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Velocity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Velocity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.MetersPerSecond.serializeBinaryToWriter
    );
  }
  f = message.getY();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      units_pb.MetersPerSecond.serializeBinaryToWriter
    );
  }
  f = message.getZ();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      units_pb.MetersPerSecond.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.airmap.Velocity.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Velocity.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Velocity.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Velocity.Error.displayName = 'proto.airmap.Velocity.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Velocity.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Velocity.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Velocity.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Velocity.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = msg.getX()) && units_pb.MetersPerSecond.toObject(includeInstance, f),
    y: (f = msg.getY()) && units_pb.MetersPerSecond.toObject(includeInstance, f),
    z: (f = msg.getZ()) && units_pb.MetersPerSecond.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Velocity.Error}
 */
proto.airmap.Velocity.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Velocity.Error;
  return proto.airmap.Velocity.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Velocity.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Velocity.Error}
 */
proto.airmap.Velocity.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.MetersPerSecond;
      reader.readMessage(value,units_pb.MetersPerSecond.deserializeBinaryFromReader);
      msg.setX(value);
      break;
    case 2:
      var value = new units_pb.MetersPerSecond;
      reader.readMessage(value,units_pb.MetersPerSecond.deserializeBinaryFromReader);
      msg.setY(value);
      break;
    case 3:
      var value = new units_pb.MetersPerSecond;
      reader.readMessage(value,units_pb.MetersPerSecond.deserializeBinaryFromReader);
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Velocity.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Velocity.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Velocity.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Velocity.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.MetersPerSecond.serializeBinaryToWriter
    );
  }
  f = message.getY();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      units_pb.MetersPerSecond.serializeBinaryToWriter
    );
  }
  f = message.getZ();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      units_pb.MetersPerSecond.serializeBinaryToWriter
    );
  }
};


/**
 * optional MetersPerSecond x = 1;
 * @return {?proto.airmap.MetersPerSecond}
 */
proto.airmap.Velocity.Error.prototype.getX = function() {
  return /** @type{?proto.airmap.MetersPerSecond} */ (
    jspb.Message.getWrapperField(this, units_pb.MetersPerSecond, 1));
};


/** @param {?proto.airmap.MetersPerSecond|undefined} value */
proto.airmap.Velocity.Error.prototype.setX = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Velocity.Error.prototype.clearX = function() {
  this.setX(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Velocity.Error.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MetersPerSecond y = 2;
 * @return {?proto.airmap.MetersPerSecond}
 */
proto.airmap.Velocity.Error.prototype.getY = function() {
  return /** @type{?proto.airmap.MetersPerSecond} */ (
    jspb.Message.getWrapperField(this, units_pb.MetersPerSecond, 2));
};


/** @param {?proto.airmap.MetersPerSecond|undefined} value */
proto.airmap.Velocity.Error.prototype.setY = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.airmap.Velocity.Error.prototype.clearY = function() {
  this.setY(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Velocity.Error.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MetersPerSecond z = 3;
 * @return {?proto.airmap.MetersPerSecond}
 */
proto.airmap.Velocity.Error.prototype.getZ = function() {
  return /** @type{?proto.airmap.MetersPerSecond} */ (
    jspb.Message.getWrapperField(this, units_pb.MetersPerSecond, 3));
};


/** @param {?proto.airmap.MetersPerSecond|undefined} value */
proto.airmap.Velocity.Error.prototype.setZ = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.airmap.Velocity.Error.prototype.clearZ = function() {
  this.setZ(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Velocity.Error.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MetersPerSecond x = 1;
 * @return {?proto.airmap.MetersPerSecond}
 */
proto.airmap.Velocity.prototype.getX = function() {
  return /** @type{?proto.airmap.MetersPerSecond} */ (
    jspb.Message.getWrapperField(this, units_pb.MetersPerSecond, 1));
};


/** @param {?proto.airmap.MetersPerSecond|undefined} value */
proto.airmap.Velocity.prototype.setX = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Velocity.prototype.clearX = function() {
  this.setX(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Velocity.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MetersPerSecond y = 2;
 * @return {?proto.airmap.MetersPerSecond}
 */
proto.airmap.Velocity.prototype.getY = function() {
  return /** @type{?proto.airmap.MetersPerSecond} */ (
    jspb.Message.getWrapperField(this, units_pb.MetersPerSecond, 2));
};


/** @param {?proto.airmap.MetersPerSecond|undefined} value */
proto.airmap.Velocity.prototype.setY = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.airmap.Velocity.prototype.clearY = function() {
  this.setY(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Velocity.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MetersPerSecond z = 3;
 * @return {?proto.airmap.MetersPerSecond}
 */
proto.airmap.Velocity.prototype.getZ = function() {
  return /** @type{?proto.airmap.MetersPerSecond} */ (
    jspb.Message.getWrapperField(this, units_pb.MetersPerSecond, 3));
};


/** @param {?proto.airmap.MetersPerSecond|undefined} value */
proto.airmap.Velocity.prototype.setZ = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.airmap.Velocity.prototype.clearZ = function() {
  this.setZ(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Velocity.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Error error = 1001;
 * @return {?proto.airmap.Velocity.Error}
 */
proto.airmap.Velocity.prototype.getError = function() {
  return /** @type{?proto.airmap.Velocity.Error} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Velocity.Error, 1001));
};


/** @param {?proto.airmap.Velocity.Error|undefined} value */
proto.airmap.Velocity.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.airmap.Velocity.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Velocity.prototype.hasError = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Orientation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.airmap.Orientation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Orientation.displayName = 'proto.airmap.Orientation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Orientation.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Orientation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Orientation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Orientation.toObject = function(includeInstance, msg) {
  var f, obj = {
    yaw: (f = msg.getYaw()) && units_pb.Degrees.toObject(includeInstance, f),
    pitch: (f = msg.getPitch()) && units_pb.Degrees.toObject(includeInstance, f),
    roll: (f = msg.getRoll()) && units_pb.Degrees.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.airmap.Orientation.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Orientation}
 */
proto.airmap.Orientation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Orientation;
  return proto.airmap.Orientation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Orientation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Orientation}
 */
proto.airmap.Orientation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setYaw(value);
      break;
    case 2:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setPitch(value);
      break;
    case 3:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setRoll(value);
      break;
    case 1001:
      var value = new proto.airmap.Orientation.Error;
      reader.readMessage(value,proto.airmap.Orientation.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Orientation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Orientation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Orientation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Orientation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getPitch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getRoll();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.airmap.Orientation.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Orientation.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Orientation.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Orientation.Error.displayName = 'proto.airmap.Orientation.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Orientation.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Orientation.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Orientation.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Orientation.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    yaw: (f = msg.getYaw()) && units_pb.Degrees.toObject(includeInstance, f),
    pitch: (f = msg.getPitch()) && units_pb.Degrees.toObject(includeInstance, f),
    roll: (f = msg.getRoll()) && units_pb.Degrees.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Orientation.Error}
 */
proto.airmap.Orientation.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Orientation.Error;
  return proto.airmap.Orientation.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Orientation.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Orientation.Error}
 */
proto.airmap.Orientation.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setYaw(value);
      break;
    case 2:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setPitch(value);
      break;
    case 3:
      var value = new units_pb.Degrees;
      reader.readMessage(value,units_pb.Degrees.deserializeBinaryFromReader);
      msg.setRoll(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Orientation.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Orientation.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Orientation.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Orientation.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYaw();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getPitch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
  f = message.getRoll();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      units_pb.Degrees.serializeBinaryToWriter
    );
  }
};


/**
 * optional Degrees yaw = 1;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Orientation.Error.prototype.getYaw = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 1));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Orientation.Error.prototype.setYaw = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Orientation.Error.prototype.clearYaw = function() {
  this.setYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Orientation.Error.prototype.hasYaw = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Degrees pitch = 2;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Orientation.Error.prototype.getPitch = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 2));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Orientation.Error.prototype.setPitch = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.airmap.Orientation.Error.prototype.clearPitch = function() {
  this.setPitch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Orientation.Error.prototype.hasPitch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Degrees roll = 3;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Orientation.Error.prototype.getRoll = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 3));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Orientation.Error.prototype.setRoll = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.airmap.Orientation.Error.prototype.clearRoll = function() {
  this.setRoll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Orientation.Error.prototype.hasRoll = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Degrees yaw = 1;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Orientation.prototype.getYaw = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 1));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Orientation.prototype.setYaw = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Orientation.prototype.clearYaw = function() {
  this.setYaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Orientation.prototype.hasYaw = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Degrees pitch = 2;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Orientation.prototype.getPitch = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 2));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Orientation.prototype.setPitch = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.airmap.Orientation.prototype.clearPitch = function() {
  this.setPitch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Orientation.prototype.hasPitch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Degrees roll = 3;
 * @return {?proto.airmap.Degrees}
 */
proto.airmap.Orientation.prototype.getRoll = function() {
  return /** @type{?proto.airmap.Degrees} */ (
    jspb.Message.getWrapperField(this, units_pb.Degrees, 3));
};


/** @param {?proto.airmap.Degrees|undefined} value */
proto.airmap.Orientation.prototype.setRoll = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.airmap.Orientation.prototype.clearRoll = function() {
  this.setRoll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Orientation.prototype.hasRoll = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Error error = 1001;
 * @return {?proto.airmap.Orientation.Error}
 */
proto.airmap.Orientation.prototype.getError = function() {
  return /** @type{?proto.airmap.Orientation.Error} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Orientation.Error, 1001));
};


/** @param {?proto.airmap.Orientation.Error|undefined} value */
proto.airmap.Orientation.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.airmap.Orientation.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Orientation.prototype.hasError = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Pressure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.airmap.Pressure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Pressure.displayName = 'proto.airmap.Pressure';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Pressure.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Pressure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Pressure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Pressure.toObject = function(includeInstance, msg) {
  var f, obj = {
    units: (f = msg.getUnits()) && units_pb.Pascal.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.airmap.Pressure.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Pressure}
 */
proto.airmap.Pressure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Pressure;
  return proto.airmap.Pressure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Pressure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Pressure}
 */
proto.airmap.Pressure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Pascal;
      reader.readMessage(value,units_pb.Pascal.deserializeBinaryFromReader);
      msg.setUnits(value);
      break;
    case 1001:
      var value = new proto.airmap.Pressure.Error;
      reader.readMessage(value,proto.airmap.Pressure.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Pressure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Pressure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Pressure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Pressure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnits();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Pascal.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.airmap.Pressure.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Pressure.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Pressure.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Pressure.Error.displayName = 'proto.airmap.Pressure.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Pressure.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Pressure.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Pressure.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Pressure.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    pressure: (f = msg.getPressure()) && units_pb.Pascal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Pressure.Error}
 */
proto.airmap.Pressure.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Pressure.Error;
  return proto.airmap.Pressure.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Pressure.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Pressure.Error}
 */
proto.airmap.Pressure.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Pascal;
      reader.readMessage(value,units_pb.Pascal.deserializeBinaryFromReader);
      msg.setPressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Pressure.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Pressure.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Pressure.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Pressure.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPressure();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Pascal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pascal pressure = 1;
 * @return {?proto.airmap.Pascal}
 */
proto.airmap.Pressure.Error.prototype.getPressure = function() {
  return /** @type{?proto.airmap.Pascal} */ (
    jspb.Message.getWrapperField(this, units_pb.Pascal, 1));
};


/** @param {?proto.airmap.Pascal|undefined} value */
proto.airmap.Pressure.Error.prototype.setPressure = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Pressure.Error.prototype.clearPressure = function() {
  this.setPressure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Pressure.Error.prototype.hasPressure = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Pascal units = 1;
 * @return {?proto.airmap.Pascal}
 */
proto.airmap.Pressure.prototype.getUnits = function() {
  return /** @type{?proto.airmap.Pascal} */ (
    jspb.Message.getWrapperField(this, units_pb.Pascal, 1));
};


/** @param {?proto.airmap.Pascal|undefined} value */
proto.airmap.Pressure.prototype.setUnits = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Pressure.prototype.clearUnits = function() {
  this.setUnits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Pressure.prototype.hasUnits = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 1001;
 * @return {?proto.airmap.Pressure.Error}
 */
proto.airmap.Pressure.prototype.getError = function() {
  return /** @type{?proto.airmap.Pressure.Error} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Pressure.Error, 1001));
};


/** @param {?proto.airmap.Pressure.Error|undefined} value */
proto.airmap.Pressure.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.airmap.Pressure.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Pressure.prototype.hasError = function() {
  return jspb.Message.getField(this, 1001) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Temperature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.airmap.Temperature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Temperature.displayName = 'proto.airmap.Temperature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Temperature.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Temperature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Temperature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Temperature.toObject = function(includeInstance, msg) {
  var f, obj = {
    degrees: (f = msg.getDegrees()) && units_pb.Celsius.toObject(includeInstance, f),
    error: (f = msg.getError()) && proto.airmap.Temperature.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Temperature}
 */
proto.airmap.Temperature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Temperature;
  return proto.airmap.Temperature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Temperature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Temperature}
 */
proto.airmap.Temperature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Celsius;
      reader.readMessage(value,units_pb.Celsius.deserializeBinaryFromReader);
      msg.setDegrees(value);
      break;
    case 1001:
      var value = new proto.airmap.Temperature.Error;
      reader.readMessage(value,proto.airmap.Temperature.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Temperature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Temperature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Temperature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Temperature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDegrees();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Celsius.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1001,
      f,
      proto.airmap.Temperature.Error.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.airmap.Temperature.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.airmap.Temperature.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.airmap.Temperature.Error.displayName = 'proto.airmap.Temperature.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.airmap.Temperature.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.airmap.Temperature.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.airmap.Temperature.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Temperature.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    degrees: (f = msg.getDegrees()) && units_pb.Celsius.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.airmap.Temperature.Error}
 */
proto.airmap.Temperature.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.airmap.Temperature.Error;
  return proto.airmap.Temperature.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.airmap.Temperature.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.airmap.Temperature.Error}
 */
proto.airmap.Temperature.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new units_pb.Celsius;
      reader.readMessage(value,units_pb.Celsius.deserializeBinaryFromReader);
      msg.setDegrees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.airmap.Temperature.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.airmap.Temperature.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.airmap.Temperature.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.airmap.Temperature.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDegrees();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      units_pb.Celsius.serializeBinaryToWriter
    );
  }
};


/**
 * optional Celsius degrees = 1;
 * @return {?proto.airmap.Celsius}
 */
proto.airmap.Temperature.Error.prototype.getDegrees = function() {
  return /** @type{?proto.airmap.Celsius} */ (
    jspb.Message.getWrapperField(this, units_pb.Celsius, 1));
};


/** @param {?proto.airmap.Celsius|undefined} value */
proto.airmap.Temperature.Error.prototype.setDegrees = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Temperature.Error.prototype.clearDegrees = function() {
  this.setDegrees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Temperature.Error.prototype.hasDegrees = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Celsius degrees = 1;
 * @return {?proto.airmap.Celsius}
 */
proto.airmap.Temperature.prototype.getDegrees = function() {
  return /** @type{?proto.airmap.Celsius} */ (
    jspb.Message.getWrapperField(this, units_pb.Celsius, 1));
};


/** @param {?proto.airmap.Celsius|undefined} value */
proto.airmap.Temperature.prototype.setDegrees = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.airmap.Temperature.prototype.clearDegrees = function() {
  this.setDegrees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Temperature.prototype.hasDegrees = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 1001;
 * @return {?proto.airmap.Temperature.Error}
 */
proto.airmap.Temperature.prototype.getError = function() {
  return /** @type{?proto.airmap.Temperature.Error} */ (
    jspb.Message.getWrapperField(this, proto.airmap.Temperature.Error, 1001));
};


/** @param {?proto.airmap.Temperature.Error|undefined} value */
proto.airmap.Temperature.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1001, value);
};


proto.airmap.Temperature.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.airmap.Temperature.prototype.hasError = function() {
  return jspb.Message.getField(this, 1001) != null;
};


goog.object.extend(exports, proto.airmap);
